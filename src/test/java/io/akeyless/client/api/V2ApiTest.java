/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.api;

import io.akeyless.client.ApiException;
import io.akeyless.client.model.AkeylessGatewayConfig;
import io.akeyless.client.model.AssocRoleAuthMethod;
import io.akeyless.client.model.AssocTargetItem;
import io.akeyless.client.model.Auth;
import io.akeyless.client.model.AuthMethod;
import io.akeyless.client.model.AuthOutput;
import io.akeyless.client.model.Configure;
import io.akeyless.client.model.ConfigureOutput;
import io.akeyless.client.model.CreateAuthMethod;
import io.akeyless.client.model.CreateAuthMethodAWSIAM;
import io.akeyless.client.model.CreateAuthMethodAWSIAMOutput;
import io.akeyless.client.model.CreateAuthMethodAzureAD;
import io.akeyless.client.model.CreateAuthMethodAzureADOutput;
import io.akeyless.client.model.CreateAuthMethodHuawei;
import io.akeyless.client.model.CreateAuthMethodHuaweiOutput;
import io.akeyless.client.model.CreateAuthMethodOAuth2;
import io.akeyless.client.model.CreateAuthMethodOAuth2Output;
import io.akeyless.client.model.CreateAuthMethodOutput;
import io.akeyless.client.model.CreateAuthMethodSAML;
import io.akeyless.client.model.CreateAuthMethodSAMLOutput;
import io.akeyless.client.model.CreateAuthMethodUniversalIdentity;
import io.akeyless.client.model.CreateAuthMethodUniversalIdentityOutput;
import io.akeyless.client.model.CreateAwsTarget;
import io.akeyless.client.model.CreateDBTarget;
import io.akeyless.client.model.CreateDynamicSecret;
import io.akeyless.client.model.CreateKey;
import io.akeyless.client.model.CreateKeyOutput;
import io.akeyless.client.model.CreatePKICertIssuer;
import io.akeyless.client.model.CreatePKICertIssuerOutput;
import io.akeyless.client.model.CreateRabbitMQTarget;
import io.akeyless.client.model.CreateRdpTarget;
import io.akeyless.client.model.CreateRole;
import io.akeyless.client.model.CreateRoleAuthMethodAssocOutput;
import io.akeyless.client.model.CreateSSHCertIssuer;
import io.akeyless.client.model.CreateSSHCertIssuerOutput;
import io.akeyless.client.model.CreateSSHTarget;
import io.akeyless.client.model.CreateSecret;
import io.akeyless.client.model.CreateSecretOutput;
import io.akeyless.client.model.CreateTargetItemAssocOutput;
import io.akeyless.client.model.CreateWebTarget;
import io.akeyless.client.model.DSProducerDetails;
import io.akeyless.client.model.Decrypt;
import io.akeyless.client.model.DecryptOutput;
import io.akeyless.client.model.DecryptPKCS1;
import io.akeyless.client.model.DecryptPKCS1Output;
import io.akeyless.client.model.DeleteAuthMethod;
import io.akeyless.client.model.DeleteAuthMethodOutput;
import io.akeyless.client.model.DeleteAuthMethods;
import io.akeyless.client.model.DeleteAuthMethodsOutput;
import io.akeyless.client.model.DeleteItem;
import io.akeyless.client.model.DeleteItemOutput;
import io.akeyless.client.model.DeleteItems;
import io.akeyless.client.model.DeleteItemsOutput;
import io.akeyless.client.model.DeleteRole;
import io.akeyless.client.model.DeleteRoleAssociation;
import io.akeyless.client.model.DeleteRoleRule;
import io.akeyless.client.model.DeleteRoleRuleOutput;
import io.akeyless.client.model.DeleteRoles;
import io.akeyless.client.model.DeleteTarget;
import io.akeyless.client.model.DeleteTargetAssociation;
import io.akeyless.client.model.DeleteTargets;
import io.akeyless.client.model.DescribeItem;
import io.akeyless.client.model.Encrypt;
import io.akeyless.client.model.EncryptOutput;
import io.akeyless.client.model.EncryptPKCS1;
import io.akeyless.client.model.EncryptPKCS1Output;
import io.akeyless.client.model.GatewayAddSubAdmins;
import io.akeyless.client.model.GatewayAddSubAdminsOutput;
import io.akeyless.client.model.GatewayCreateProducerArtifactory;
import io.akeyless.client.model.GatewayCreateProducerArtifactoryOutput;
import io.akeyless.client.model.GatewayCreateProducerAws;
import io.akeyless.client.model.GatewayCreateProducerAwsOutput;
import io.akeyless.client.model.GatewayCreateProducerAzure;
import io.akeyless.client.model.GatewayCreateProducerAzureOutput;
import io.akeyless.client.model.GatewayCreateProducerEks;
import io.akeyless.client.model.GatewayCreateProducerEksOutput;
import io.akeyless.client.model.GatewayCreateProducerGke;
import io.akeyless.client.model.GatewayCreateProducerGkeOutput;
import io.akeyless.client.model.GatewayCreateProducerMSSQL;
import io.akeyless.client.model.GatewayCreateProducerMSSQLOutput;
import io.akeyless.client.model.GatewayCreateProducerMongo;
import io.akeyless.client.model.GatewayCreateProducerMongoOutput;
import io.akeyless.client.model.GatewayCreateProducerMySQL;
import io.akeyless.client.model.GatewayCreateProducerMySQLOutput;
import io.akeyless.client.model.GatewayCreateProducerPostgreSQL;
import io.akeyless.client.model.GatewayCreateProducerPostgreSQLOutput;
import io.akeyless.client.model.GatewayCreateProducerRabbitMQ;
import io.akeyless.client.model.GatewayCreateProducerRabbitMQOutput;
import io.akeyless.client.model.GatewayCreateProducerRdp;
import io.akeyless.client.model.GatewayCreateProducerRdpOutput;
import io.akeyless.client.model.GatewayDeleteProducer;
import io.akeyless.client.model.GatewayDeleteProducerOutput;
import io.akeyless.client.model.GatewayDeleteSubAdmins;
import io.akeyless.client.model.GatewayDeleteSubAdminsOutput;
import io.akeyless.client.model.GatewayGetConfig;
import io.akeyless.client.model.GatewayGetProducer;
import io.akeyless.client.model.GatewayGetTmpUsers;
import io.akeyless.client.model.GatewayListProducers;
import io.akeyless.client.model.GatewayListSubAdmins;
import io.akeyless.client.model.GatewayRevokeTmpUsers;
import io.akeyless.client.model.GatewayStartProducer;
import io.akeyless.client.model.GatewayStartProducerOutput;
import io.akeyless.client.model.GatewayStopProducer;
import io.akeyless.client.model.GatewayStopProducerOutput;
import io.akeyless.client.model.GatewayUpdateTmpUsers;
import io.akeyless.client.model.GetAuthMethod;
import io.akeyless.client.model.GetDynamicSecretValue;
import io.akeyless.client.model.GetProducersListReplyObj;
import io.akeyless.client.model.GetRSAPublic;
import io.akeyless.client.model.GetRSAPublicOutput;
import io.akeyless.client.model.GetRole;
import io.akeyless.client.model.GetSSHCertificate;
import io.akeyless.client.model.GetSSHCertificateOutput;
import io.akeyless.client.model.GetSecretValue;
import io.akeyless.client.model.GetSubAdminsListReplyObj;
import io.akeyless.client.model.GetTarget;
import io.akeyless.client.model.GetTargetDetails;
import io.akeyless.client.model.GetTargetDetailsOutput;
import io.akeyless.client.model.Item;
import io.akeyless.client.model.JSONError;
import io.akeyless.client.model.ListAuthMethods;
import io.akeyless.client.model.ListAuthMethodsOutput;
import io.akeyless.client.model.ListItems;
import io.akeyless.client.model.ListItemsInPathOutput;
import io.akeyless.client.model.ListRoles;
import io.akeyless.client.model.ListRolesOutput;
import io.akeyless.client.model.ListTargets;
import io.akeyless.client.model.ListTargetsOutput;
import io.akeyless.client.model.MoveObjects;
import io.akeyless.client.model.RawCreds;
import io.akeyless.client.model.RefreshKey;
import io.akeyless.client.model.RefreshKeyOutput;
import io.akeyless.client.model.ReverseRBAC;
import io.akeyless.client.model.ReverseRBACOutput;
import io.akeyless.client.model.Role;
import io.akeyless.client.model.RollbackSecret;
import io.akeyless.client.model.RollbackSecretOutput;
import io.akeyless.client.model.RotateKey;
import io.akeyless.client.model.RotateKeyOutput;
import io.akeyless.client.model.SetItemState;
import io.akeyless.client.model.SetRoleRule;
import io.akeyless.client.model.SignPKCS1;
import io.akeyless.client.model.SignPKCS1Output;
import io.akeyless.client.model.StaticCredsAuth;
import io.akeyless.client.model.StaticCredsAuthOutput;
import io.akeyless.client.model.SystemAccessCredentialsReplyObj;
import io.akeyless.client.model.Target;
import io.akeyless.client.model.TmpUserData;
import io.akeyless.client.model.UidCreateChildToken;
import io.akeyless.client.model.UidCreateChildTokenOutput;
import io.akeyless.client.model.UidGenerateToken;
import io.akeyless.client.model.UidGenerateTokenOutput;
import io.akeyless.client.model.UidListChildren;
import io.akeyless.client.model.UidRevokeToken;
import io.akeyless.client.model.UidRotateToken;
import io.akeyless.client.model.UidRotateTokenOutput;
import io.akeyless.client.model.UniversalIdentityDetails;
import io.akeyless.client.model.UpdateAWSTargetDetails;
import io.akeyless.client.model.UpdateDBTargetDetails;
import io.akeyless.client.model.UpdateItem;
import io.akeyless.client.model.UpdateItemOutput;
import io.akeyless.client.model.UpdateRDPTargetDetails;
import io.akeyless.client.model.UpdateRabbitMQTargetDetails;
import io.akeyless.client.model.UpdateRole;
import io.akeyless.client.model.UpdateRoleOutput;
import io.akeyless.client.model.UpdateSSHTargetDetails;
import io.akeyless.client.model.UpdateSecretVal;
import io.akeyless.client.model.UpdateSecretValOutput;
import io.akeyless.client.model.UpdateTarget;
import io.akeyless.client.model.UpdateTargetOutput;
import io.akeyless.client.model.UpdateWebTargetDetails;
import io.akeyless.client.model.UploadRSA;
import io.akeyless.client.model.VerifyPKCS1;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2Api
 */
@Ignore
public class V2ApiTest {

    private final V2Api api = new V2Api();

    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assocRoleAuthMethodTest() throws ApiException {
        AssocRoleAuthMethod body = null;
        CreateRoleAuthMethodAssocOutput response = api.assocRoleAuthMethod(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void assocTargetItemTest() throws ApiException {
        AssocTargetItem body = null;
        CreateTargetItemAssocOutput response = api.assocTargetItem(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void authTest() throws ApiException {
        Auth body = null;
        AuthOutput response = api.auth(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void configureTest() throws ApiException {
        Configure body = null;
        ConfigureOutput response = api.configure(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodTest() throws ApiException {
        CreateAuthMethod body = null;
        CreateAuthMethodOutput response = api.createAuthMethod(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodAWSIAMTest() throws ApiException {
        CreateAuthMethodAWSIAM body = null;
        CreateAuthMethodAWSIAMOutput response = api.createAuthMethodAWSIAM(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodAzureADTest() throws ApiException {
        CreateAuthMethodAzureAD body = null;
        CreateAuthMethodAzureADOutput response = api.createAuthMethodAzureAD(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodHuaweiTest() throws ApiException {
        CreateAuthMethodHuawei body = null;
        CreateAuthMethodHuaweiOutput response = api.createAuthMethodHuawei(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodOAuth2Test() throws ApiException {
        CreateAuthMethodOAuth2 body = null;
        CreateAuthMethodOAuth2Output response = api.createAuthMethodOAuth2(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodSAMLTest() throws ApiException {
        CreateAuthMethodSAML body = null;
        CreateAuthMethodSAMLOutput response = api.createAuthMethodSAML(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAuthMethodUniversalIdentityTest() throws ApiException {
        CreateAuthMethodUniversalIdentity body = null;
        CreateAuthMethodUniversalIdentityOutput response = api.createAuthMethodUniversalIdentity(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAwsTargetTest() throws ApiException {
        CreateAwsTarget body = null;
        Object response = api.createAwsTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDBTargetTest() throws ApiException {
        CreateDBTarget body = null;
        Object response = api.createDBTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDynamicSecretTest() throws ApiException {
        CreateDynamicSecret body = null;
        Object response = api.createDynamicSecret(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createKeyTest() throws ApiException {
        CreateKey body = null;
        CreateKeyOutput response = api.createKey(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createPKICertIssuerTest() throws ApiException {
        CreatePKICertIssuer body = null;
        CreatePKICertIssuerOutput response = api.createPKICertIssuer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRabbitMQTargetTest() throws ApiException {
        CreateRabbitMQTarget body = null;
        Object response = api.createRabbitMQTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRdpTargetTest() throws ApiException {
        CreateRdpTarget body = null;
        Object response = api.createRdpTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createRoleTest() throws ApiException {
        CreateRole body = null;
        Object response = api.createRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHCertIssuerTest() throws ApiException {
        CreateSSHCertIssuer body = null;
        CreateSSHCertIssuerOutput response = api.createSSHCertIssuer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSSHTargetTest() throws ApiException {
        CreateSSHTarget body = null;
        Object response = api.createSSHTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecretTest() throws ApiException {
        CreateSecret body = null;
        CreateSecretOutput response = api.createSecret(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTargetTest() throws ApiException {
        Object body = null;
        Object response = api.createTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWebTargetTest() throws ApiException {
        CreateWebTarget body = null;
        Object response = api.createWebTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void decryptTest() throws ApiException {
        Decrypt body = null;
        DecryptOutput response = api.decrypt(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void decryptPKCS1Test() throws ApiException {
        DecryptPKCS1 body = null;
        DecryptPKCS1Output response = api.decryptPKCS1(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthMethodTest() throws ApiException {
        DeleteAuthMethod body = null;
        DeleteAuthMethodOutput response = api.deleteAuthMethod(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAuthMethodsTest() throws ApiException {
        DeleteAuthMethods body = null;
        DeleteAuthMethodsOutput response = api.deleteAuthMethods(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemTest() throws ApiException {
        DeleteItem body = null;
        DeleteItemOutput response = api.deleteItem(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteItemsTest() throws ApiException {
        DeleteItems body = null;
        DeleteItemsOutput response = api.deleteItems(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleTest() throws ApiException {
        DeleteRole body = null;
        Object response = api.deleteRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleAssociationTest() throws ApiException {
        DeleteRoleAssociation body = null;
        Object response = api.deleteRoleAssociation(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRoleRuleTest() throws ApiException {
        DeleteRoleRule body = null;
        DeleteRoleRuleOutput response = api.deleteRoleRule(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteRolesTest() throws ApiException {
        DeleteRoles body = null;
        Object response = api.deleteRoles(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTargetTest() throws ApiException {
        DeleteTarget body = null;
        Object response = api.deleteTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTargetAssociationTest() throws ApiException {
        DeleteTargetAssociation body = null;
        Object response = api.deleteTargetAssociation(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteTargetsTest() throws ApiException {
        DeleteTargets body = null;
        Object response = api.deleteTargets(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void describeItemTest() throws ApiException {
        DescribeItem body = null;
        Item response = api.describeItem(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void encryptTest() throws ApiException {
        Encrypt body = null;
        EncryptOutput response = api.encrypt(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void encryptPKCS1Test() throws ApiException {
        EncryptPKCS1 body = null;
        EncryptPKCS1Output response = api.encryptPKCS1(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayAddSubAdminsTest() throws ApiException {
        GatewayAddSubAdmins body = null;
        GatewayAddSubAdminsOutput response = api.gatewayAddSubAdmins(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerArtifactoryTest() throws ApiException {
        GatewayCreateProducerArtifactory body = null;
        GatewayCreateProducerArtifactoryOutput response = api.gatewayCreateProducerArtifactory(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerAwsTest() throws ApiException {
        GatewayCreateProducerAws body = null;
        GatewayCreateProducerAwsOutput response = api.gatewayCreateProducerAws(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerAzureTest() throws ApiException {
        GatewayCreateProducerAzure body = null;
        GatewayCreateProducerAzureOutput response = api.gatewayCreateProducerAzure(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerEksTest() throws ApiException {
        GatewayCreateProducerEks body = null;
        GatewayCreateProducerEksOutput response = api.gatewayCreateProducerEks(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerGkeTest() throws ApiException {
        GatewayCreateProducerGke body = null;
        GatewayCreateProducerGkeOutput response = api.gatewayCreateProducerGke(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerMSSQLTest() throws ApiException {
        GatewayCreateProducerMSSQL body = null;
        GatewayCreateProducerMSSQLOutput response = api.gatewayCreateProducerMSSQL(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerMongoTest() throws ApiException {
        GatewayCreateProducerMongo body = null;
        GatewayCreateProducerMongoOutput response = api.gatewayCreateProducerMongo(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerMySQLTest() throws ApiException {
        GatewayCreateProducerMySQL body = null;
        GatewayCreateProducerMySQLOutput response = api.gatewayCreateProducerMySQL(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerPostgreSQLTest() throws ApiException {
        GatewayCreateProducerPostgreSQL body = null;
        GatewayCreateProducerPostgreSQLOutput response = api.gatewayCreateProducerPostgreSQL(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerRabbitMQTest() throws ApiException {
        GatewayCreateProducerRabbitMQ body = null;
        GatewayCreateProducerRabbitMQOutput response = api.gatewayCreateProducerRabbitMQ(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerRdpTest() throws ApiException {
        GatewayCreateProducerRdp body = null;
        GatewayCreateProducerRdpOutput response = api.gatewayCreateProducerRdp(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayCreateProducerVenafiTest() throws ApiException {
        GatewayCreateProducerAws body = null;
        GatewayCreateProducerAwsOutput response = api.gatewayCreateProducerVenafi(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayDeleteProducerTest() throws ApiException {
        GatewayDeleteProducer body = null;
        GatewayDeleteProducerOutput response = api.gatewayDeleteProducer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayDeleteSubAdminsTest() throws ApiException {
        GatewayDeleteSubAdmins body = null;
        GatewayDeleteSubAdminsOutput response = api.gatewayDeleteSubAdmins(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayGetConfigTest() throws ApiException {
        GatewayGetConfig body = null;
        AkeylessGatewayConfig response = api.gatewayGetConfig(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayGetProducerTest() throws ApiException {
        GatewayGetProducer body = null;
        DSProducerDetails response = api.gatewayGetProducer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayGetTmpUsersTest() throws ApiException {
        GatewayGetTmpUsers body = null;
        List<TmpUserData> response = api.gatewayGetTmpUsers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayListProducersTest() throws ApiException {
        GatewayListProducers body = null;
        GetProducersListReplyObj response = api.gatewayListProducers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayListSubAdminsTest() throws ApiException {
        GatewayListSubAdmins body = null;
        GetSubAdminsListReplyObj response = api.gatewayListSubAdmins(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayRevokeTmpUsersTest() throws ApiException {
        GatewayRevokeTmpUsers body = null;
        api.gatewayRevokeTmpUsers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayStartProducerTest() throws ApiException {
        GatewayStartProducer body = null;
        GatewayStartProducerOutput response = api.gatewayStartProducer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayStopProducerTest() throws ApiException {
        GatewayStopProducer body = null;
        GatewayStopProducerOutput response = api.gatewayStopProducer(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void gatewayUpdateTmpUsersTest() throws ApiException {
        GatewayUpdateTmpUsers body = null;
        api.gatewayUpdateTmpUsers(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAccountLogoTest() throws ApiException {
        Map<String, String> response = api.getAccountLogo();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAuthMethodTest() throws ApiException {
        GetAuthMethod body = null;
        AuthMethod response = api.getAuthMethod(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDynamicPkiCertificateTest() throws ApiException {
        Map<String, String> response = api.getDynamicPkiCertificate();

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDynamicSecretValueTest() throws ApiException {
        GetDynamicSecretValue body = null;
        Map<String, String> response = api.getDynamicSecretValue(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRSAPublicTest() throws ApiException {
        GetRSAPublic body = null;
        GetRSAPublicOutput response = api.getRSAPublic(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRoleTest() throws ApiException {
        GetRole body = null;
        Role response = api.getRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSSHCertificateTest() throws ApiException {
        GetSSHCertificate body = null;
        GetSSHCertificateOutput response = api.getSSHCertificate(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecretValueTest() throws ApiException {
        GetSecretValue body = null;
        Map<String, String> response = api.getSecretValue(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTargetTest() throws ApiException {
        GetTarget body = null;
        Target response = api.getTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTargetDetailsTest() throws ApiException {
        GetTargetDetails body = null;
        GetTargetDetailsOutput response = api.getTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listAuthMethodsTest() throws ApiException {
        ListAuthMethods body = null;
        ListAuthMethodsOutput response = api.listAuthMethods(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listItemsTest() throws ApiException {
        ListItems body = null;
        ListItemsInPathOutput response = api.listItems(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listRolesTest() throws ApiException {
        ListRoles body = null;
        ListRolesOutput response = api.listRoles(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTargetsTest() throws ApiException {
        ListTargets body = null;
        ListTargetsOutput response = api.listTargets(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void moveObjectsTest() throws ApiException {
        MoveObjects body = null;
        Object response = api.moveObjects(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rawCredsTest() throws ApiException {
        RawCreds body = null;
        SystemAccessCredentialsReplyObj response = api.rawCreds(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void refreshKeyTest() throws ApiException {
        RefreshKey body = null;
        RefreshKeyOutput response = api.refreshKey(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void reverseRBACTest() throws ApiException {
        ReverseRBAC body = null;
        ReverseRBACOutput response = api.reverseRBAC(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rollbackSecretTest() throws ApiException {
        RollbackSecret body = null;
        RollbackSecretOutput response = api.rollbackSecret(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void rotateKeyTest() throws ApiException {
        RotateKey body = null;
        RotateKeyOutput response = api.rotateKey(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setItemStateTest() throws ApiException {
        SetItemState body = null;
        Object response = api.setItemState(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setRoleRuleTest() throws ApiException {
        SetRoleRule body = null;
        Object response = api.setRoleRule(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void signPKCS1Test() throws ApiException {
        SignPKCS1 body = null;
        SignPKCS1Output response = api.signPKCS1(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void staticCredsAuthTest() throws ApiException {
        StaticCredsAuth body = null;
        StaticCredsAuthOutput response = api.staticCredsAuth(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidCreateChildTokenTest() throws ApiException {
        UidCreateChildToken body = null;
        UidCreateChildTokenOutput response = api.uidCreateChildToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidGenerateTokenTest() throws ApiException {
        UidGenerateToken body = null;
        UidGenerateTokenOutput response = api.uidGenerateToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidListChildrenTest() throws ApiException {
        UidListChildren body = null;
        UniversalIdentityDetails response = api.uidListChildren(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidRevokeTokenTest() throws ApiException {
        UidRevokeToken body = null;
        Object response = api.uidRevokeToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uidRotateTokenTest() throws ApiException {
        UidRotateToken body = null;
        UidRotateTokenOutput response = api.uidRotateToken(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAWSTargetDetailsTest() throws ApiException {
        UpdateAWSTargetDetails body = null;
        UpdateTargetOutput response = api.updateAWSTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDBTargetDetailsTest() throws ApiException {
        UpdateDBTargetDetails body = null;
        UpdateTargetOutput response = api.updateDBTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateItemTest() throws ApiException {
        UpdateItem body = null;
        UpdateItemOutput response = api.updateItem(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRDPTargetDetailsTest() throws ApiException {
        UpdateRDPTargetDetails body = null;
        UpdateTargetOutput response = api.updateRDPTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRabbitMQTargetDetailsTest() throws ApiException {
        UpdateRabbitMQTargetDetails body = null;
        UpdateTargetOutput response = api.updateRabbitMQTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateRoleTest() throws ApiException {
        UpdateRole body = null;
        UpdateRoleOutput response = api.updateRole(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSSHTargetDetailsTest() throws ApiException {
        UpdateSSHTargetDetails body = null;
        UpdateTargetOutput response = api.updateSSHTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSecretValTest() throws ApiException {
        UpdateSecretVal body = null;
        UpdateSecretValOutput response = api.updateSecretVal(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTargetTest() throws ApiException {
        UpdateTarget body = null;
        UpdateTargetOutput response = api.updateTarget(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateTargetDetailsTest() throws ApiException {
        Object body = null;
        UpdateTargetOutput response = api.updateTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateWebTargetDetailsTest() throws ApiException {
        UpdateWebTargetDetails body = null;
        UpdateTargetOutput response = api.updateWebTargetDetails(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadRSATest() throws ApiException {
        UploadRSA body = null;
        Object response = api.uploadRSA(body);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void verifyPKCS1Test() throws ApiException {
        VerifyPKCS1 body = null;
        Object response = api.verifyPKCS1(body);

        // TODO: test validations
    }
    
}
