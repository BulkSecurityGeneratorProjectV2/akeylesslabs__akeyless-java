/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.api;

import io.akeyless.client.ApiCallback;
import io.akeyless.client.ApiClient;
import io.akeyless.client.ApiException;
import io.akeyless.client.ApiResponse;
import io.akeyless.client.Configuration;
import io.akeyless.client.Pair;
import io.akeyless.client.ProgressRequestBody;
import io.akeyless.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.akeyless.client.model.AkeylessGatewayConfig;
import io.akeyless.client.model.AssocRoleAuthMethod;
import io.akeyless.client.model.AssocTargetItem;
import io.akeyless.client.model.Auth;
import io.akeyless.client.model.AuthMethod;
import io.akeyless.client.model.AuthOutput;
import io.akeyless.client.model.Configure;
import io.akeyless.client.model.ConfigureOutput;
import io.akeyless.client.model.CreateAWSTarget;
import io.akeyless.client.model.CreateAWSTargetOutput;
import io.akeyless.client.model.CreateArtifactoryTarget;
import io.akeyless.client.model.CreateArtifactoryTargetOutput;
import io.akeyless.client.model.CreateAuthMethod;
import io.akeyless.client.model.CreateAuthMethodAWSIAM;
import io.akeyless.client.model.CreateAuthMethodAWSIAMOutput;
import io.akeyless.client.model.CreateAuthMethodAzureAD;
import io.akeyless.client.model.CreateAuthMethodAzureADOutput;
import io.akeyless.client.model.CreateAuthMethodGCP;
import io.akeyless.client.model.CreateAuthMethodGCPOutput;
import io.akeyless.client.model.CreateAuthMethodHuawei;
import io.akeyless.client.model.CreateAuthMethodHuaweiOutput;
import io.akeyless.client.model.CreateAuthMethodOAuth2;
import io.akeyless.client.model.CreateAuthMethodOAuth2Output;
import io.akeyless.client.model.CreateAuthMethodOutput;
import io.akeyless.client.model.CreateAuthMethodSAML;
import io.akeyless.client.model.CreateAuthMethodSAMLOutput;
import io.akeyless.client.model.CreateAuthMethodUniversalIdentity;
import io.akeyless.client.model.CreateAuthMethodUniversalIdentityOutput;
import io.akeyless.client.model.CreateAzureTarget;
import io.akeyless.client.model.CreateAzureTargetOutput;
import io.akeyless.client.model.CreateClassicKey;
import io.akeyless.client.model.CreateClassicKeyOutput;
import io.akeyless.client.model.CreateDBTarget;
import io.akeyless.client.model.CreateDBTargetOutput;
import io.akeyless.client.model.CreateDFCKey;
import io.akeyless.client.model.CreateDFCKeyOutput;
import io.akeyless.client.model.CreateDynamicSecret;
import io.akeyless.client.model.CreateEKSTarget;
import io.akeyless.client.model.CreateEKSTargetOutput;
import io.akeyless.client.model.CreateGKETarget;
import io.akeyless.client.model.CreateGKETargetOutput;
import io.akeyless.client.model.CreateGcpTarget;
import io.akeyless.client.model.CreateGcpTargetOutput;
import io.akeyless.client.model.CreateKey;
import io.akeyless.client.model.CreateKeyOutput;
import io.akeyless.client.model.CreateNativeK8STarget;
import io.akeyless.client.model.CreatePKICertIssuer;
import io.akeyless.client.model.CreatePKICertIssuerOutput;
import io.akeyless.client.model.CreateRabbitMQTarget;
import io.akeyless.client.model.CreateRabbitMQTargetOutput;
import io.akeyless.client.model.CreateRole;
import io.akeyless.client.model.CreateRoleAuthMethodAssocOutput;
import io.akeyless.client.model.CreateRotatedSecret;
import io.akeyless.client.model.CreateRotatedSecretOutput;
import io.akeyless.client.model.CreateSSHCertIssuer;
import io.akeyless.client.model.CreateSSHCertIssuerOutput;
import io.akeyless.client.model.CreateSSHTarget;
import io.akeyless.client.model.CreateSSHTargetOutput;
import io.akeyless.client.model.CreateSecret;
import io.akeyless.client.model.CreateSecretOutput;
import io.akeyless.client.model.CreateTargetItemAssocOutput;
import io.akeyless.client.model.CreateWebTarget;
import io.akeyless.client.model.CreateWebTargetOutput;
import io.akeyless.client.model.DSProducerDetails;
import io.akeyless.client.model.Decrypt;
import io.akeyless.client.model.DecryptOutput;
import io.akeyless.client.model.DecryptPKCS1;
import io.akeyless.client.model.DecryptPKCS1Output;
import io.akeyless.client.model.DecryptWithClassicKey;
import io.akeyless.client.model.DecryptWithClassicKeyOutput;
import io.akeyless.client.model.DeleteAuthMethod;
import io.akeyless.client.model.DeleteAuthMethodOutput;
import io.akeyless.client.model.DeleteAuthMethods;
import io.akeyless.client.model.DeleteAuthMethodsOutput;
import io.akeyless.client.model.DeleteItem;
import io.akeyless.client.model.DeleteItemOutput;
import io.akeyless.client.model.DeleteItems;
import io.akeyless.client.model.DeleteItemsOutput;
import io.akeyless.client.model.DeleteRole;
import io.akeyless.client.model.DeleteRoleAssociation;
import io.akeyless.client.model.DeleteRoleRule;
import io.akeyless.client.model.DeleteRoleRuleOutput;
import io.akeyless.client.model.DeleteRoles;
import io.akeyless.client.model.DeleteTarget;
import io.akeyless.client.model.DeleteTargetAssociation;
import io.akeyless.client.model.DeleteTargets;
import io.akeyless.client.model.DescribeItem;
import io.akeyless.client.model.DescribePermissions;
import io.akeyless.client.model.DescribePermissionsOutput;
import io.akeyless.client.model.Encrypt;
import io.akeyless.client.model.EncryptOutput;
import io.akeyless.client.model.EncryptPKCS1;
import io.akeyless.client.model.EncryptPKCS1Output;
import io.akeyless.client.model.EncryptWithClassicKey;
import io.akeyless.client.model.GatewayCreateProducerArtifactory;
import io.akeyless.client.model.GatewayCreateProducerArtifactoryOutput;
import io.akeyless.client.model.GatewayCreateProducerAws;
import io.akeyless.client.model.GatewayCreateProducerAwsOutput;
import io.akeyless.client.model.GatewayCreateProducerAzure;
import io.akeyless.client.model.GatewayCreateProducerAzureOutput;
import io.akeyless.client.model.GatewayCreateProducerCertificateAutomation;
import io.akeyless.client.model.GatewayCreateProducerCertificateAutomationOutput;
import io.akeyless.client.model.GatewayCreateProducerCustom;
import io.akeyless.client.model.GatewayCreateProducerCustomOutput;
import io.akeyless.client.model.GatewayCreateProducerEks;
import io.akeyless.client.model.GatewayCreateProducerEksOutput;
import io.akeyless.client.model.GatewayCreateProducerGcp;
import io.akeyless.client.model.GatewayCreateProducerGcpOutput;
import io.akeyless.client.model.GatewayCreateProducerGke;
import io.akeyless.client.model.GatewayCreateProducerGkeOutput;
import io.akeyless.client.model.GatewayCreateProducerMSSQL;
import io.akeyless.client.model.GatewayCreateProducerMSSQLOutput;
import io.akeyless.client.model.GatewayCreateProducerMongo;
import io.akeyless.client.model.GatewayCreateProducerMongoOutput;
import io.akeyless.client.model.GatewayCreateProducerMySQL;
import io.akeyless.client.model.GatewayCreateProducerMySQLOutput;
import io.akeyless.client.model.GatewayCreateProducerNativeK8SOutput;
import io.akeyless.client.model.GatewayCreateProducerPostgreSQL;
import io.akeyless.client.model.GatewayCreateProducerPostgreSQLOutput;
import io.akeyless.client.model.GatewayCreateProducerRabbitMQ;
import io.akeyless.client.model.GatewayCreateProducerRabbitMQOutput;
import io.akeyless.client.model.GatewayCreateProducerRdp;
import io.akeyless.client.model.GatewayCreateProducerRdpOutput;
import io.akeyless.client.model.GatewayCreateProducerSnowflake;
import io.akeyless.client.model.GatewayCreateProducerSnowflakeOutput;
import io.akeyless.client.model.GatewayDeleteAllowedManagementAccess;
import io.akeyless.client.model.GatewayDeleteProducer;
import io.akeyless.client.model.GatewayDeleteProducerOutput;
import io.akeyless.client.model.GatewayGetConfig;
import io.akeyless.client.model.GatewayGetProducer;
import io.akeyless.client.model.GatewayGetTmpUsers;
import io.akeyless.client.model.GatewayListAllowedManagementAccess;
import io.akeyless.client.model.GatewayListProducers;
import io.akeyless.client.model.GatewayRevokeTmpUsers;
import io.akeyless.client.model.GatewayStartProducer;
import io.akeyless.client.model.GatewayStartProducerOutput;
import io.akeyless.client.model.GatewayStopProducer;
import io.akeyless.client.model.GatewayStopProducerOutput;
import io.akeyless.client.model.GatewayUpdateTmpUsers;
import io.akeyless.client.model.GetAuthMethod;
import io.akeyless.client.model.GetDynamicSecretValue;
import io.akeyless.client.model.GetKubeExecCreds;
import io.akeyless.client.model.GetKubeExecCredsOutput;
import io.akeyless.client.model.GetPKICertificate;
import io.akeyless.client.model.GetPKICertificateOutput;
import io.akeyless.client.model.GetProducersListReplyObj;
import io.akeyless.client.model.GetRSAPublic;
import io.akeyless.client.model.GetRSAPublicOutput;
import io.akeyless.client.model.GetRole;
import io.akeyless.client.model.GetRotatedSecretValue;
import io.akeyless.client.model.GetSSHCertificate;
import io.akeyless.client.model.GetSSHCertificateOutput;
import io.akeyless.client.model.GetSecretValue;
import io.akeyless.client.model.GetSubAdminsListReplyObj;
import io.akeyless.client.model.GetTarget;
import io.akeyless.client.model.GetTargetDetails;
import io.akeyless.client.model.GetTargetDetailsOutput;
import io.akeyless.client.model.Item;
import io.akeyless.client.model.JSONError;
import io.akeyless.client.model.ListAuthMethods;
import io.akeyless.client.model.ListAuthMethodsOutput;
import io.akeyless.client.model.ListItems;
import io.akeyless.client.model.ListItemsInPathOutput;
import io.akeyless.client.model.ListRoles;
import io.akeyless.client.model.ListRolesOutput;
import io.akeyless.client.model.ListTargets;
import io.akeyless.client.model.ListTargetsOutput;
import io.akeyless.client.model.MoveObjects;
import io.akeyless.client.model.RawCreds;
import io.akeyless.client.model.RefreshKey;
import io.akeyless.client.model.RefreshKeyOutput;
import io.akeyless.client.model.ReverseRBAC;
import io.akeyless.client.model.ReverseRBACOutput;
import io.akeyless.client.model.Role;
import io.akeyless.client.model.RollbackSecret;
import io.akeyless.client.model.RollbackSecretOutput;
import io.akeyless.client.model.RotateKeyOutput;
import io.akeyless.client.model.SetItemState;
import io.akeyless.client.model.SetRoleRule;
import io.akeyless.client.model.SignJWTWithClassicKey;
import io.akeyless.client.model.SignPKCS1;
import io.akeyless.client.model.SignPKCS1Output;
import io.akeyless.client.model.SignPKICertWithClassicKey;
import io.akeyless.client.model.StaticCredsAuth;
import io.akeyless.client.model.StaticCredsAuthOutput;
import io.akeyless.client.model.SystemAccessCredentialsReplyObj;
import io.akeyless.client.model.Target;
import io.akeyless.client.model.TmpUserData;
import io.akeyless.client.model.UidCreateChildToken;
import io.akeyless.client.model.UidCreateChildTokenOutput;
import io.akeyless.client.model.UidGenerateToken;
import io.akeyless.client.model.UidGenerateTokenOutput;
import io.akeyless.client.model.UidListChildren;
import io.akeyless.client.model.UidRevokeToken;
import io.akeyless.client.model.UidRotateToken;
import io.akeyless.client.model.UidRotateTokenOutput;
import io.akeyless.client.model.UniversalIdentityDetails;
import io.akeyless.client.model.UpdateAWSTarget;
import io.akeyless.client.model.UpdateAWSTargetDetails;
import io.akeyless.client.model.UpdateAssoc;
import io.akeyless.client.model.UpdateAzureTarget;
import io.akeyless.client.model.UpdateAzureTargetOutput;
import io.akeyless.client.model.UpdateDBTarget;
import io.akeyless.client.model.UpdateDBTargetDetails;
import io.akeyless.client.model.UpdateDBTargetOutput;
import io.akeyless.client.model.UpdateEKSTarget;
import io.akeyless.client.model.UpdateEKSTargetOutput;
import io.akeyless.client.model.UpdateGKETarget;
import io.akeyless.client.model.UpdateGKETargetOutput;
import io.akeyless.client.model.UpdateGcpTarget;
import io.akeyless.client.model.UpdateGcpTargetOutput;
import io.akeyless.client.model.UpdateItem;
import io.akeyless.client.model.UpdateItemOutput;
import io.akeyless.client.model.UpdateNativeK8STarget;
import io.akeyless.client.model.UpdateRDPTargetDetails;
import io.akeyless.client.model.UpdateRabbitMQTarget;
import io.akeyless.client.model.UpdateRabbitMQTargetDetails;
import io.akeyless.client.model.UpdateRabbitMQTargetOutput;
import io.akeyless.client.model.UpdateRole;
import io.akeyless.client.model.UpdateRoleOutput;
import io.akeyless.client.model.UpdateRotatedSecret;
import io.akeyless.client.model.UpdateRotatedSecretOutput;
import io.akeyless.client.model.UpdateRotationSettings;
import io.akeyless.client.model.UpdateSSHTarget;
import io.akeyless.client.model.UpdateSSHTargetDetails;
import io.akeyless.client.model.UpdateSSHTargetOutput;
import io.akeyless.client.model.UpdateSecretVal;
import io.akeyless.client.model.UpdateSecretValOutput;
import io.akeyless.client.model.UpdateTarget;
import io.akeyless.client.model.UpdateTargetOutput;
import io.akeyless.client.model.UpdateWebTarget;
import io.akeyless.client.model.UpdateWebTargetDetails;
import io.akeyless.client.model.UpdateWebTargetOutput;
import io.akeyless.client.model.UploadRSA;
import io.akeyless.client.model.VerifyJWTWithClassicKey;
import io.akeyless.client.model.VerifyPKCS1;
import io.akeyless.client.model.VerifyPKICertWithClassicKey;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V2Api {
    private ApiClient localVarApiClient;

    public V2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for assocRoleAuthMethod
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocRoleAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assocRoleAuthMethodCall(AssocRoleAuthMethod body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/assoc-role-am";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assocRoleAuthMethodValidateBeforeCall(AssocRoleAuthMethod body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling assocRoleAuthMethod(Async)");
        }
        

        okhttp3.Call localVarCall = assocRoleAuthMethodCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateRoleAuthMethodAssocOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocRoleAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRoleAuthMethodAssocOutput assocRoleAuthMethod(AssocRoleAuthMethod body) throws ApiException {
        ApiResponse<CreateRoleAuthMethodAssocOutput> localVarResp = assocRoleAuthMethodWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateRoleAuthMethodAssocOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocRoleAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRoleAuthMethodAssocOutput> assocRoleAuthMethodWithHttpInfo(AssocRoleAuthMethod body) throws ApiException {
        okhttp3.Call localVarCall = assocRoleAuthMethodValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateRoleAuthMethodAssocOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocRoleAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assocRoleAuthMethodAsync(AssocRoleAuthMethod body, final ApiCallback<CreateRoleAuthMethodAssocOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = assocRoleAuthMethodValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateRoleAuthMethodAssocOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assocTargetItem
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocTargetItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assocTargetItemCall(AssocTargetItem body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/assoc-target-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assocTargetItemValidateBeforeCall(AssocTargetItem body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling assocTargetItem(Async)");
        }
        

        okhttp3.Call localVarCall = assocTargetItemCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateTargetItemAssocOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocTargetItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateTargetItemAssocOutput assocTargetItem(AssocTargetItem body) throws ApiException {
        ApiResponse<CreateTargetItemAssocOutput> localVarResp = assocTargetItemWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateTargetItemAssocOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocTargetItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTargetItemAssocOutput> assocTargetItemWithHttpInfo(AssocTargetItem body) throws ApiException {
        okhttp3.Call localVarCall = assocTargetItemValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateTargetItemAssocOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> assocTargetItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assocTargetItemAsync(AssocTargetItem body, final ApiCallback<CreateTargetItemAssocOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = assocTargetItemValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateTargetItemAssocOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for auth
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authCall(Auth body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call authValidateBeforeCall(Auth body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling auth(Async)");
        }
        

        okhttp3.Call localVarCall = authCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return AuthOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthOutput auth(Auth body) throws ApiException {
        ApiResponse<AuthOutput> localVarResp = authWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;AuthOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthOutput> authWithHttpInfo(Auth body) throws ApiException {
        okhttp3.Call localVarCall = authValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<AuthOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> authResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call authAsync(Auth body, final ApiCallback<AuthOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = authValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<AuthOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for configure
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> configureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configureCall(Configure body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/configure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call configureValidateBeforeCall(Configure body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling configure(Async)");
        }
        

        okhttp3.Call localVarCall = configureCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ConfigureOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> configureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ConfigureOutput configure(Configure body) throws ApiException {
        ApiResponse<ConfigureOutput> localVarResp = configureWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;ConfigureOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> configureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfigureOutput> configureWithHttpInfo(Configure body) throws ApiException {
        okhttp3.Call localVarCall = configureValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ConfigureOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> configureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call configureAsync(Configure body, final ApiCallback<ConfigureOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = configureValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ConfigureOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAWSTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAWSTargetCall(CreateAWSTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-aws-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAWSTargetValidateBeforeCall(CreateAWSTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAWSTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createAWSTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAWSTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAWSTargetOutput createAWSTarget(CreateAWSTarget body) throws ApiException {
        ApiResponse<CreateAWSTargetOutput> localVarResp = createAWSTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAWSTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAWSTargetOutput> createAWSTargetWithHttpInfo(CreateAWSTarget body) throws ApiException {
        okhttp3.Call localVarCall = createAWSTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAWSTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAWSTargetAsync(CreateAWSTarget body, final ApiCallback<CreateAWSTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAWSTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAWSTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createArtifactoryTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArtifactoryTargetCall(CreateArtifactoryTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-artifactory-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createArtifactoryTargetValidateBeforeCall(CreateArtifactoryTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createArtifactoryTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createArtifactoryTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateArtifactoryTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateArtifactoryTargetOutput createArtifactoryTarget(CreateArtifactoryTarget body) throws ApiException {
        ApiResponse<CreateArtifactoryTargetOutput> localVarResp = createArtifactoryTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateArtifactoryTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateArtifactoryTargetOutput> createArtifactoryTargetWithHttpInfo(CreateArtifactoryTarget body) throws ApiException {
        okhttp3.Call localVarCall = createArtifactoryTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateArtifactoryTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createArtifactoryTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createArtifactoryTargetAsync(CreateArtifactoryTarget body, final ApiCallback<CreateArtifactoryTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createArtifactoryTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateArtifactoryTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethod
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodCall(CreateAuthMethod body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-auth-method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodValidateBeforeCall(CreateAuthMethod body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthMethod(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthMethodCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAuthMethodOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodOutput createAuthMethod(CreateAuthMethod body) throws ApiException {
        ApiResponse<CreateAuthMethodOutput> localVarResp = createAuthMethodWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthMethodOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodOutput> createAuthMethodWithHttpInfo(CreateAuthMethod body) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAsync(CreateAuthMethod body, final ApiCallback<CreateAuthMethodOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodAWSIAM
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAWSIAMCall(CreateAuthMethodAWSIAM body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-auth-method-aws-iam";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodAWSIAMValidateBeforeCall(CreateAuthMethodAWSIAM body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthMethodAWSIAM(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthMethodAWSIAMCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAuthMethodAWSIAMOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodAWSIAMOutput createAuthMethodAWSIAM(CreateAuthMethodAWSIAM body) throws ApiException {
        ApiResponse<CreateAuthMethodAWSIAMOutput> localVarResp = createAuthMethodAWSIAMWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthMethodAWSIAMOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodAWSIAMOutput> createAuthMethodAWSIAMWithHttpInfo(CreateAuthMethodAWSIAM body) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodAWSIAMValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodAWSIAMOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAWSIAMResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAWSIAMAsync(CreateAuthMethodAWSIAM body, final ApiCallback<CreateAuthMethodAWSIAMOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodAWSIAMValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodAWSIAMOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodAzureAD
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAzureADCall(CreateAuthMethodAzureAD body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-auth-method-azure-ad";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodAzureADValidateBeforeCall(CreateAuthMethodAzureAD body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthMethodAzureAD(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthMethodAzureADCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAuthMethodAzureADOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodAzureADOutput createAuthMethodAzureAD(CreateAuthMethodAzureAD body) throws ApiException {
        ApiResponse<CreateAuthMethodAzureADOutput> localVarResp = createAuthMethodAzureADWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthMethodAzureADOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodAzureADOutput> createAuthMethodAzureADWithHttpInfo(CreateAuthMethodAzureAD body) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodAzureADValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodAzureADOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodAzureADResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodAzureADAsync(CreateAuthMethodAzureAD body, final ApiCallback<CreateAuthMethodAzureADOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodAzureADValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodAzureADOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodGCP
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodGCPCall(CreateAuthMethodGCP body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-auth-method-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodGCPValidateBeforeCall(CreateAuthMethodGCP body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthMethodGCP(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthMethodGCPCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAuthMethodGCPOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodGCPOutput createAuthMethodGCP(CreateAuthMethodGCP body) throws ApiException {
        ApiResponse<CreateAuthMethodGCPOutput> localVarResp = createAuthMethodGCPWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthMethodGCPOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodGCPOutput> createAuthMethodGCPWithHttpInfo(CreateAuthMethodGCP body) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodGCPValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodGCPOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodGCPResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodGCPAsync(CreateAuthMethodGCP body, final ApiCallback<CreateAuthMethodGCPOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodGCPValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodGCPOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodHuawei
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodHuaweiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodHuaweiCall(CreateAuthMethodHuawei body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-auth-method-huawei";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodHuaweiValidateBeforeCall(CreateAuthMethodHuawei body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthMethodHuawei(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthMethodHuaweiCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAuthMethodHuaweiOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodHuaweiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodHuaweiOutput createAuthMethodHuawei(CreateAuthMethodHuawei body) throws ApiException {
        ApiResponse<CreateAuthMethodHuaweiOutput> localVarResp = createAuthMethodHuaweiWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthMethodHuaweiOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodHuaweiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodHuaweiOutput> createAuthMethodHuaweiWithHttpInfo(CreateAuthMethodHuawei body) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodHuaweiValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodHuaweiOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodHuaweiResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodHuaweiAsync(CreateAuthMethodHuawei body, final ApiCallback<CreateAuthMethodHuaweiOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodHuaweiValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodHuaweiOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodOAuth2
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodOAuth2Call(CreateAuthMethodOAuth2 body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-auth-method-oauth2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodOAuth2ValidateBeforeCall(CreateAuthMethodOAuth2 body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthMethodOAuth2(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthMethodOAuth2Call(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAuthMethodOAuth2Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodOAuth2Output createAuthMethodOAuth2(CreateAuthMethodOAuth2 body) throws ApiException {
        ApiResponse<CreateAuthMethodOAuth2Output> localVarResp = createAuthMethodOAuth2WithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthMethodOAuth2Output&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodOAuth2Output> createAuthMethodOAuth2WithHttpInfo(CreateAuthMethodOAuth2 body) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodOAuth2ValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOAuth2Output>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodOAuth2Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodOAuth2Async(CreateAuthMethodOAuth2 body, final ApiCallback<CreateAuthMethodOAuth2Output> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodOAuth2ValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodOAuth2Output>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodSAML
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodSAMLCall(CreateAuthMethodSAML body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-auth-method-saml";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodSAMLValidateBeforeCall(CreateAuthMethodSAML body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthMethodSAML(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthMethodSAMLCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAuthMethodSAMLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodSAMLOutput createAuthMethodSAML(CreateAuthMethodSAML body) throws ApiException {
        ApiResponse<CreateAuthMethodSAMLOutput> localVarResp = createAuthMethodSAMLWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthMethodSAMLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodSAMLOutput> createAuthMethodSAMLWithHttpInfo(CreateAuthMethodSAML body) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodSAMLValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodSAMLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodSAMLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodSAMLAsync(CreateAuthMethodSAML body, final ApiCallback<CreateAuthMethodSAMLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodSAMLValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodSAMLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAuthMethodUniversalIdentity
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodUniversalIdentityCall(CreateAuthMethodUniversalIdentity body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-auth-method-universal-identity";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAuthMethodUniversalIdentityValidateBeforeCall(CreateAuthMethodUniversalIdentity body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAuthMethodUniversalIdentity(Async)");
        }
        

        okhttp3.Call localVarCall = createAuthMethodUniversalIdentityCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAuthMethodUniversalIdentityOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAuthMethodUniversalIdentityOutput createAuthMethodUniversalIdentity(CreateAuthMethodUniversalIdentity body) throws ApiException {
        ApiResponse<CreateAuthMethodUniversalIdentityOutput> localVarResp = createAuthMethodUniversalIdentityWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAuthMethodUniversalIdentityOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAuthMethodUniversalIdentityOutput> createAuthMethodUniversalIdentityWithHttpInfo(CreateAuthMethodUniversalIdentity body) throws ApiException {
        okhttp3.Call localVarCall = createAuthMethodUniversalIdentityValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAuthMethodUniversalIdentityOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAuthMethodUniversalIdentityResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAuthMethodUniversalIdentityAsync(CreateAuthMethodUniversalIdentity body, final ApiCallback<CreateAuthMethodUniversalIdentityOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAuthMethodUniversalIdentityValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAuthMethodUniversalIdentityOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAzureTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAzureTargetCall(CreateAzureTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-azure-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAzureTargetValidateBeforeCall(CreateAzureTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createAzureTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createAzureTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateAzureTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateAzureTargetOutput createAzureTarget(CreateAzureTarget body) throws ApiException {
        ApiResponse<CreateAzureTargetOutput> localVarResp = createAzureTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateAzureTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateAzureTargetOutput> createAzureTargetWithHttpInfo(CreateAzureTarget body) throws ApiException {
        okhttp3.Call localVarCall = createAzureTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateAzureTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAzureTargetAsync(CreateAzureTarget body, final ApiCallback<CreateAzureTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAzureTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateAzureTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createClassicKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClassicKeyCall(CreateClassicKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createClassicKeyValidateBeforeCall(CreateClassicKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createClassicKey(Async)");
        }
        

        okhttp3.Call localVarCall = createClassicKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateClassicKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateClassicKeyOutput createClassicKey(CreateClassicKey body) throws ApiException {
        ApiResponse<CreateClassicKeyOutput> localVarResp = createClassicKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateClassicKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateClassicKeyOutput> createClassicKeyWithHttpInfo(CreateClassicKey body) throws ApiException {
        okhttp3.Call localVarCall = createClassicKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateClassicKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> CreateClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createClassicKeyAsync(CreateClassicKey body, final ApiCallback<CreateClassicKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createClassicKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateClassicKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDBTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDBTargetCall(CreateDBTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-db-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDBTargetValidateBeforeCall(CreateDBTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDBTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createDBTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateDBTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDBTargetOutput createDBTarget(CreateDBTarget body) throws ApiException {
        ApiResponse<CreateDBTargetOutput> localVarResp = createDBTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateDBTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDBTargetOutput> createDBTargetWithHttpInfo(CreateDBTarget body) throws ApiException {
        okhttp3.Call localVarCall = createDBTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateDBTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDBTargetAsync(CreateDBTarget body, final ApiCallback<CreateDBTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDBTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateDBTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDFCKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDFCKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDFCKeyCall(CreateDFCKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-dfc-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDFCKeyValidateBeforeCall(CreateDFCKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDFCKey(Async)");
        }
        

        okhttp3.Call localVarCall = createDFCKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateDFCKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDFCKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateDFCKeyOutput createDFCKey(CreateDFCKey body) throws ApiException {
        ApiResponse<CreateDFCKeyOutput> localVarResp = createDFCKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateDFCKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDFCKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateDFCKeyOutput> createDFCKeyWithHttpInfo(CreateDFCKey body) throws ApiException {
        okhttp3.Call localVarCall = createDFCKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateDFCKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDFCKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDFCKeyAsync(CreateDFCKey body, final ApiCallback<CreateDFCKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDFCKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateDFCKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createDynamicSecret
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDynamicSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDynamicSecretCall(CreateDynamicSecret body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-dynamic-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDynamicSecretValidateBeforeCall(CreateDynamicSecret body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createDynamicSecret(Async)");
        }
        

        okhttp3.Call localVarCall = createDynamicSecretCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDynamicSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object createDynamicSecret(CreateDynamicSecret body) throws ApiException {
        ApiResponse<Object> localVarResp = createDynamicSecretWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDynamicSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createDynamicSecretWithHttpInfo(CreateDynamicSecret body) throws ApiException {
        okhttp3.Call localVarCall = createDynamicSecretValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createDynamicSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDynamicSecretAsync(CreateDynamicSecret body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDynamicSecretValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createEKSTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEKSTargetCall(CreateEKSTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-eks-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEKSTargetValidateBeforeCall(CreateEKSTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createEKSTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createEKSTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateEKSTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateEKSTargetOutput createEKSTarget(CreateEKSTarget body) throws ApiException {
        ApiResponse<CreateEKSTargetOutput> localVarResp = createEKSTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateEKSTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateEKSTargetOutput> createEKSTargetWithHttpInfo(CreateEKSTarget body) throws ApiException {
        okhttp3.Call localVarCall = createEKSTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateEKSTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createEKSTargetAsync(CreateEKSTarget body, final ApiCallback<CreateEKSTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEKSTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateEKSTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGKETarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGKETargetCall(CreateGKETarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-gke-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGKETargetValidateBeforeCall(CreateGKETarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createGKETarget(Async)");
        }
        

        okhttp3.Call localVarCall = createGKETargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateGKETargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGKETargetOutput createGKETarget(CreateGKETarget body) throws ApiException {
        ApiResponse<CreateGKETargetOutput> localVarResp = createGKETargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateGKETargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGKETargetOutput> createGKETargetWithHttpInfo(CreateGKETarget body) throws ApiException {
        okhttp3.Call localVarCall = createGKETargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateGKETargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGKETargetAsync(CreateGKETarget body, final ApiCallback<CreateGKETargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGKETargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateGKETargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createGcpTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGcpTargetCall(CreateGcpTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-gcp-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGcpTargetValidateBeforeCall(CreateGcpTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createGcpTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createGcpTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateGcpTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateGcpTargetOutput createGcpTarget(CreateGcpTarget body) throws ApiException {
        ApiResponse<CreateGcpTargetOutput> localVarResp = createGcpTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateGcpTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateGcpTargetOutput> createGcpTargetWithHttpInfo(CreateGcpTarget body) throws ApiException {
        okhttp3.Call localVarCall = createGcpTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateGcpTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createGcpTargetAsync(CreateGcpTarget body, final ApiCallback<CreateGcpTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGcpTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateGcpTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyCall(CreateKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createKeyValidateBeforeCall(CreateKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createKey(Async)");
        }
        

        okhttp3.Call localVarCall = createKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateKeyOutput createKey(CreateKey body) throws ApiException {
        ApiResponse<CreateKeyOutput> localVarResp = createKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateKeyOutput> createKeyWithHttpInfo(CreateKey body) throws ApiException {
        okhttp3.Call localVarCall = createKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createKeyAsync(CreateKey body, final ApiCallback<CreateKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createNativeK8STarget
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createNativeK8STarget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNativeK8STargetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/create-k8s-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNativeK8STargetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = createNativeK8STargetCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return CreateNativeK8STarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createNativeK8STarget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateNativeK8STarget createNativeK8STarget() throws ApiException {
        ApiResponse<CreateNativeK8STarget> localVarResp = createNativeK8STargetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;CreateNativeK8STarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createNativeK8STarget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateNativeK8STarget> createNativeK8STargetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createNativeK8STargetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CreateNativeK8STarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createNativeK8STarget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createNativeK8STargetAsync(final ApiCallback<CreateNativeK8STarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNativeK8STargetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CreateNativeK8STarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPKICertIssuer
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPKICertIssuerCall(CreatePKICertIssuer body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-pki-cert-issuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPKICertIssuerValidateBeforeCall(CreatePKICertIssuer body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createPKICertIssuer(Async)");
        }
        

        okhttp3.Call localVarCall = createPKICertIssuerCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreatePKICertIssuerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreatePKICertIssuerOutput createPKICertIssuer(CreatePKICertIssuer body) throws ApiException {
        ApiResponse<CreatePKICertIssuerOutput> localVarResp = createPKICertIssuerWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreatePKICertIssuerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePKICertIssuerOutput> createPKICertIssuerWithHttpInfo(CreatePKICertIssuer body) throws ApiException {
        okhttp3.Call localVarCall = createPKICertIssuerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreatePKICertIssuerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createPKICertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPKICertIssuerAsync(CreatePKICertIssuer body, final ApiCallback<CreatePKICertIssuerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPKICertIssuerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreatePKICertIssuerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRabbitMQTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRabbitMQTargetCall(CreateRabbitMQTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-rabbitmq-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRabbitMQTargetValidateBeforeCall(CreateRabbitMQTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRabbitMQTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createRabbitMQTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateRabbitMQTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRabbitMQTargetOutput createRabbitMQTarget(CreateRabbitMQTarget body) throws ApiException {
        ApiResponse<CreateRabbitMQTargetOutput> localVarResp = createRabbitMQTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateRabbitMQTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRabbitMQTargetOutput> createRabbitMQTargetWithHttpInfo(CreateRabbitMQTarget body) throws ApiException {
        okhttp3.Call localVarCall = createRabbitMQTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateRabbitMQTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRabbitMQTargetAsync(CreateRabbitMQTarget body, final ApiCallback<CreateRabbitMQTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRabbitMQTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateRabbitMQTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRole
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleCall(CreateRole body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRoleValidateBeforeCall(CreateRole body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRole(Async)");
        }
        

        okhttp3.Call localVarCall = createRoleCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object createRole(CreateRole body) throws ApiException {
        ApiResponse<Object> localVarResp = createRoleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> createRoleWithHttpInfo(CreateRole body) throws ApiException {
        okhttp3.Call localVarCall = createRoleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRoleAsync(CreateRole body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRoleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createRotatedSecret
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRotatedSecretCall(CreateRotatedSecret body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-rotated-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRotatedSecretValidateBeforeCall(CreateRotatedSecret body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createRotatedSecret(Async)");
        }
        

        okhttp3.Call localVarCall = createRotatedSecretCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateRotatedSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateRotatedSecretOutput createRotatedSecret(CreateRotatedSecret body) throws ApiException {
        ApiResponse<CreateRotatedSecretOutput> localVarResp = createRotatedSecretWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateRotatedSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateRotatedSecretOutput> createRotatedSecretWithHttpInfo(CreateRotatedSecret body) throws ApiException {
        okhttp3.Call localVarCall = createRotatedSecretValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateRotatedSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createRotatedSecretAsync(CreateRotatedSecret body, final ApiCallback<CreateRotatedSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRotatedSecretValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateRotatedSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSSHCertIssuer
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSSHCertIssuerCall(CreateSSHCertIssuer body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-ssh-cert-issuer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSSHCertIssuerValidateBeforeCall(CreateSSHCertIssuer body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSSHCertIssuer(Async)");
        }
        

        okhttp3.Call localVarCall = createSSHCertIssuerCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateSSHCertIssuerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSSHCertIssuerOutput createSSHCertIssuer(CreateSSHCertIssuer body) throws ApiException {
        ApiResponse<CreateSSHCertIssuerOutput> localVarResp = createSSHCertIssuerWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateSSHCertIssuerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSSHCertIssuerOutput> createSSHCertIssuerWithHttpInfo(CreateSSHCertIssuer body) throws ApiException {
        okhttp3.Call localVarCall = createSSHCertIssuerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateSSHCertIssuerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHCertIssuerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSSHCertIssuerAsync(CreateSSHCertIssuer body, final ApiCallback<CreateSSHCertIssuerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSSHCertIssuerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateSSHCertIssuerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSSHTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSSHTargetCall(CreateSSHTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-ssh-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSSHTargetValidateBeforeCall(CreateSSHTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSSHTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createSSHTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateSSHTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSSHTargetOutput createSSHTarget(CreateSSHTarget body) throws ApiException {
        ApiResponse<CreateSSHTargetOutput> localVarResp = createSSHTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateSSHTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSSHTargetOutput> createSSHTargetWithHttpInfo(CreateSSHTarget body) throws ApiException {
        okhttp3.Call localVarCall = createSSHTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateSSHTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSSHTargetAsync(CreateSSHTarget body, final ApiCallback<CreateSSHTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSSHTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateSSHTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createSecret
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSecretCall(CreateSecret body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSecretValidateBeforeCall(CreateSecret body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createSecret(Async)");
        }
        

        okhttp3.Call localVarCall = createSecretCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateSecretOutput createSecret(CreateSecret body) throws ApiException {
        ApiResponse<CreateSecretOutput> localVarResp = createSecretWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateSecretOutput> createSecretWithHttpInfo(CreateSecret body) throws ApiException {
        okhttp3.Call localVarCall = createSecretValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createSecretAsync(CreateSecret body, final ApiCallback<CreateSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSecretValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createWebTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebTargetCall(CreateWebTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/create-web-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebTargetValidateBeforeCall(CreateWebTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling createWebTarget(Async)");
        }
        

        okhttp3.Call localVarCall = createWebTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return CreateWebTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public CreateWebTargetOutput createWebTarget(CreateWebTarget body) throws ApiException {
        ApiResponse<CreateWebTargetOutput> localVarResp = createWebTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;CreateWebTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateWebTargetOutput> createWebTargetWithHttpInfo(CreateWebTarget body) throws ApiException {
        okhttp3.Call localVarCall = createWebTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<CreateWebTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> createWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createWebTargetAsync(CreateWebTarget body, final ApiCallback<CreateWebTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<CreateWebTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decrypt
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptCall(Decrypt body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/decrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decryptValidateBeforeCall(Decrypt body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling decrypt(Async)");
        }
        

        okhttp3.Call localVarCall = decryptCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DecryptOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DecryptOutput decrypt(Decrypt body) throws ApiException {
        ApiResponse<DecryptOutput> localVarResp = decryptWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DecryptOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecryptOutput> decryptWithHttpInfo(Decrypt body) throws ApiException {
        okhttp3.Call localVarCall = decryptValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DecryptOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptAsync(Decrypt body, final ApiCallback<DecryptOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = decryptValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DecryptOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decryptPKCS1
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptPKCS1Call(DecryptPKCS1 body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/decrypt-pkcs1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decryptPKCS1ValidateBeforeCall(DecryptPKCS1 body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling decryptPKCS1(Async)");
        }
        

        okhttp3.Call localVarCall = decryptPKCS1Call(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DecryptPKCS1Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DecryptPKCS1Output decryptPKCS1(DecryptPKCS1 body) throws ApiException {
        ApiResponse<DecryptPKCS1Output> localVarResp = decryptPKCS1WithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DecryptPKCS1Output&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecryptPKCS1Output> decryptPKCS1WithHttpInfo(DecryptPKCS1 body) throws ApiException {
        okhttp3.Call localVarCall = decryptPKCS1ValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DecryptPKCS1Output>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptPKCS1Async(DecryptPKCS1 body, final ApiCallback<DecryptPKCS1Output> _callback) throws ApiException {

        okhttp3.Call localVarCall = decryptPKCS1ValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DecryptPKCS1Output>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for decryptWithClassicKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptWithClassicKeyCall(DecryptWithClassicKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/decrypt-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call decryptWithClassicKeyValidateBeforeCall(DecryptWithClassicKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling decryptWithClassicKey(Async)");
        }
        

        okhttp3.Call localVarCall = decryptWithClassicKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DecryptWithClassicKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DecryptWithClassicKeyOutput decryptWithClassicKey(DecryptWithClassicKey body) throws ApiException {
        ApiResponse<DecryptWithClassicKeyOutput> localVarResp = decryptWithClassicKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DecryptWithClassicKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DecryptWithClassicKeyOutput> decryptWithClassicKeyWithHttpInfo(DecryptWithClassicKey body) throws ApiException {
        okhttp3.Call localVarCall = decryptWithClassicKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DecryptWithClassicKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> decryptWithClassicKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call decryptWithClassicKeyAsync(DecryptWithClassicKey body, final ApiCallback<DecryptWithClassicKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = decryptWithClassicKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DecryptWithClassicKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAuthMethod
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthMethodCall(DeleteAuthMethod body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-auth-method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthMethodValidateBeforeCall(DeleteAuthMethod body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteAuthMethod(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAuthMethodCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DeleteAuthMethodOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAuthMethodOutput deleteAuthMethod(DeleteAuthMethod body) throws ApiException {
        ApiResponse<DeleteAuthMethodOutput> localVarResp = deleteAuthMethodWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DeleteAuthMethodOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAuthMethodOutput> deleteAuthMethodWithHttpInfo(DeleteAuthMethod body) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthMethodValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DeleteAuthMethodOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthMethodAsync(DeleteAuthMethod body, final ApiCallback<DeleteAuthMethodOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthMethodValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DeleteAuthMethodOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAuthMethods
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthMethodsCall(DeleteAuthMethods body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-auth-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAuthMethodsValidateBeforeCall(DeleteAuthMethods body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteAuthMethods(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAuthMethodsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DeleteAuthMethodsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteAuthMethodsOutput deleteAuthMethods(DeleteAuthMethods body) throws ApiException {
        ApiResponse<DeleteAuthMethodsOutput> localVarResp = deleteAuthMethodsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DeleteAuthMethodsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteAuthMethodsOutput> deleteAuthMethodsWithHttpInfo(DeleteAuthMethods body) throws ApiException {
        okhttp3.Call localVarCall = deleteAuthMethodsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DeleteAuthMethodsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAuthMethodsAsync(DeleteAuthMethods body, final ApiCallback<DeleteAuthMethodsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAuthMethodsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DeleteAuthMethodsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItem
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemCall(DeleteItem body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemValidateBeforeCall(DeleteItem body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteItem(Async)");
        }
        

        okhttp3.Call localVarCall = deleteItemCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DeleteItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemOutput deleteItem(DeleteItem body) throws ApiException {
        ApiResponse<DeleteItemOutput> localVarResp = deleteItemWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DeleteItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteItemOutput> deleteItemWithHttpInfo(DeleteItem body) throws ApiException {
        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DeleteItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemAsync(DeleteItem body, final ApiCallback<DeleteItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DeleteItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteItems
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemsCall(DeleteItems body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteItemsValidateBeforeCall(DeleteItems body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteItems(Async)");
        }
        

        okhttp3.Call localVarCall = deleteItemsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DeleteItemsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteItemsOutput deleteItems(DeleteItems body) throws ApiException {
        ApiResponse<DeleteItemsOutput> localVarResp = deleteItemsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DeleteItemsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteItemsOutput> deleteItemsWithHttpInfo(DeleteItems body) throws ApiException {
        okhttp3.Call localVarCall = deleteItemsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DeleteItemsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteItemsAsync(DeleteItems body, final ApiCallback<DeleteItemsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteItemsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DeleteItemsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRole
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleCall(DeleteRole body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleValidateBeforeCall(DeleteRole body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteRole(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRoleCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteRole(DeleteRole body) throws ApiException {
        ApiResponse<Object> localVarResp = deleteRoleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteRoleWithHttpInfo(DeleteRole body) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAsync(DeleteRole body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoleAssociation
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAssociationCall(DeleteRoleAssociation body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-assoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleAssociationValidateBeforeCall(DeleteRoleAssociation body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteRoleAssociation(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRoleAssociationCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteRoleAssociation(DeleteRoleAssociation body) throws ApiException {
        ApiResponse<Object> localVarResp = deleteRoleAssociationWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteRoleAssociationWithHttpInfo(DeleteRoleAssociation body) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleAssociationValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleAssociationAsync(DeleteRoleAssociation body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleAssociationValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoleRule
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleRuleCall(DeleteRoleRule body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-role-rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRoleRuleValidateBeforeCall(DeleteRoleRule body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteRoleRule(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRoleRuleCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DeleteRoleRuleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteRoleRuleOutput deleteRoleRule(DeleteRoleRule body) throws ApiException {
        ApiResponse<DeleteRoleRuleOutput> localVarResp = deleteRoleRuleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DeleteRoleRuleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteRoleRuleOutput> deleteRoleRuleWithHttpInfo(DeleteRoleRule body) throws ApiException {
        okhttp3.Call localVarCall = deleteRoleRuleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DeleteRoleRuleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRoleRuleAsync(DeleteRoleRule body, final ApiCallback<DeleteRoleRuleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRoleRuleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DeleteRoleRuleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteRoles
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRolesCall(DeleteRoles body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRolesValidateBeforeCall(DeleteRoles body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteRoles(Async)");
        }
        

        okhttp3.Call localVarCall = deleteRolesCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteRoles(DeleteRoles body) throws ApiException {
        ApiResponse<Object> localVarResp = deleteRolesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteRolesWithHttpInfo(DeleteRoles body) throws ApiException {
        okhttp3.Call localVarCall = deleteRolesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteRolesAsync(DeleteRoles body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRolesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetCall(DeleteTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTargetValidateBeforeCall(DeleteTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteTarget(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTarget(DeleteTarget body) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTargetWithHttpInfo(DeleteTarget body) throws ApiException {
        okhttp3.Call localVarCall = deleteTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetAsync(DeleteTarget body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTargetAssociation
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetAssociationCall(DeleteTargetAssociation body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-assoc-target-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTargetAssociationValidateBeforeCall(DeleteTargetAssociation body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteTargetAssociation(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTargetAssociationCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTargetAssociation(DeleteTargetAssociation body) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTargetAssociationWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTargetAssociationWithHttpInfo(DeleteTargetAssociation body) throws ApiException {
        okhttp3.Call localVarCall = deleteTargetAssociationValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetAssociationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetAssociationAsync(DeleteTargetAssociation body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTargetAssociationValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTargets
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetsCall(DeleteTargets body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/delete-targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTargetsValidateBeforeCall(DeleteTargets body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling deleteTargets(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTargetsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteTargets(DeleteTargets body) throws ApiException {
        ApiResponse<Object> localVarResp = deleteTargetsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteTargetsWithHttpInfo(DeleteTargets body) throws ApiException {
        okhttp3.Call localVarCall = deleteTargetsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> deleteTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteTargetsAsync(DeleteTargets body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTargetsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describeItem
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeItemCall(DescribeItem body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/describe-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeItemValidateBeforeCall(DescribeItem body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describeItem(Async)");
        }
        

        okhttp3.Call localVarCall = describeItemCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Item
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Item describeItem(DescribeItem body) throws ApiException {
        ApiResponse<Item> localVarResp = describeItemWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Item&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Item> describeItemWithHttpInfo(DescribeItem body) throws ApiException {
        okhttp3.Call localVarCall = describeItemValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> describeItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describeItemAsync(DescribeItem body, final ApiCallback<Item> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeItemValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Item>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for describePermissions
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DescribePermissionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePermissionsCall(DescribePermissions body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/describe-permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describePermissionsValidateBeforeCall(DescribePermissions body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling describePermissions(Async)");
        }
        

        okhttp3.Call localVarCall = describePermissionsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DescribePermissionsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DescribePermissionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DescribePermissionsOutput describePermissions(DescribePermissions body) throws ApiException {
        ApiResponse<DescribePermissionsOutput> localVarResp = describePermissionsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DescribePermissionsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DescribePermissionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescribePermissionsOutput> describePermissionsWithHttpInfo(DescribePermissions body) throws ApiException {
        okhttp3.Call localVarCall = describePermissionsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DescribePermissionsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> DescribePermissionsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call describePermissionsAsync(DescribePermissions body, final ApiCallback<DescribePermissionsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = describePermissionsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DescribePermissionsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encrypt
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptCall(Encrypt body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/encrypt";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptValidateBeforeCall(Encrypt body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling encrypt(Async)");
        }
        

        okhttp3.Call localVarCall = encryptCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return EncryptOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EncryptOutput encrypt(Encrypt body) throws ApiException {
        ApiResponse<EncryptOutput> localVarResp = encryptWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;EncryptOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EncryptOutput> encryptWithHttpInfo(Encrypt body) throws ApiException {
        okhttp3.Call localVarCall = encryptValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptAsync(Encrypt body, final ApiCallback<EncryptOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encryptPKCS1
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptPKCS1Call(EncryptPKCS1 body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/encrypt-pkcs1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptPKCS1ValidateBeforeCall(EncryptPKCS1 body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling encryptPKCS1(Async)");
        }
        

        okhttp3.Call localVarCall = encryptPKCS1Call(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return EncryptPKCS1Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EncryptPKCS1Output encryptPKCS1(EncryptPKCS1 body) throws ApiException {
        ApiResponse<EncryptPKCS1Output> localVarResp = encryptPKCS1WithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;EncryptPKCS1Output&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EncryptPKCS1Output> encryptPKCS1WithHttpInfo(EncryptPKCS1 body) throws ApiException {
        okhttp3.Call localVarCall = encryptPKCS1ValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EncryptPKCS1Output>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptPKCS1Async(EncryptPKCS1 body, final ApiCallback<EncryptPKCS1Output> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptPKCS1ValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EncryptPKCS1Output>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for encryptWithClassicKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptWithClassicKeyCall(EncryptWithClassicKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/encrypt-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call encryptWithClassicKeyValidateBeforeCall(EncryptWithClassicKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling encryptWithClassicKey(Async)");
        }
        

        okhttp3.Call localVarCall = encryptWithClassicKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return EncryptOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public EncryptOutput encryptWithClassicKey(EncryptWithClassicKey body) throws ApiException {
        ApiResponse<EncryptOutput> localVarResp = encryptWithClassicKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;EncryptOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EncryptOutput> encryptWithClassicKeyWithHttpInfo(EncryptWithClassicKey body) throws ApiException {
        okhttp3.Call localVarCall = encryptWithClassicKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> encryptResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call encryptWithClassicKeyAsync(EncryptWithClassicKey body, final ApiCallback<EncryptOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = encryptWithClassicKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EncryptOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerArtifactory
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerArtifactoryCall(GatewayCreateProducerArtifactory body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-artifactory";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerArtifactoryValidateBeforeCall(GatewayCreateProducerArtifactory body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerArtifactory(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerArtifactoryCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerArtifactoryOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerArtifactoryOutput gatewayCreateProducerArtifactory(GatewayCreateProducerArtifactory body) throws ApiException {
        ApiResponse<GatewayCreateProducerArtifactoryOutput> localVarResp = gatewayCreateProducerArtifactoryWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerArtifactoryOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerArtifactoryOutput> gatewayCreateProducerArtifactoryWithHttpInfo(GatewayCreateProducerArtifactory body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerArtifactoryValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerArtifactoryOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerArtifactoryResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerArtifactoryAsync(GatewayCreateProducerArtifactory body, final ApiCallback<GatewayCreateProducerArtifactoryOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerArtifactoryValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerArtifactoryOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerAws
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerAwsCall(GatewayCreateProducerAws body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-aws";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerAwsValidateBeforeCall(GatewayCreateProducerAws body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerAws(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerAwsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerAwsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerAwsOutput gatewayCreateProducerAws(GatewayCreateProducerAws body) throws ApiException {
        ApiResponse<GatewayCreateProducerAwsOutput> localVarResp = gatewayCreateProducerAwsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerAwsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerAwsOutput> gatewayCreateProducerAwsWithHttpInfo(GatewayCreateProducerAws body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerAwsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerAwsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAwsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerAwsAsync(GatewayCreateProducerAws body, final ApiCallback<GatewayCreateProducerAwsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerAwsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerAwsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerAzure
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerAzureCall(GatewayCreateProducerAzure body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-azure";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerAzureValidateBeforeCall(GatewayCreateProducerAzure body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerAzure(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerAzureCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerAzureOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerAzureOutput gatewayCreateProducerAzure(GatewayCreateProducerAzure body) throws ApiException {
        ApiResponse<GatewayCreateProducerAzureOutput> localVarResp = gatewayCreateProducerAzureWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerAzureOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerAzureOutput> gatewayCreateProducerAzureWithHttpInfo(GatewayCreateProducerAzure body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerAzureValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerAzureOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerAzureResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerAzureAsync(GatewayCreateProducerAzure body, final ApiCallback<GatewayCreateProducerAzureOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerAzureValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerAzureOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerCertificateAutomation
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerCertificateAutomationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerCertificateAutomationCall(GatewayCreateProducerCertificateAutomation body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-certificate-automation";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerCertificateAutomationValidateBeforeCall(GatewayCreateProducerCertificateAutomation body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerCertificateAutomation(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerCertificateAutomationCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerCertificateAutomationOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerCertificateAutomationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerCertificateAutomationOutput gatewayCreateProducerCertificateAutomation(GatewayCreateProducerCertificateAutomation body) throws ApiException {
        ApiResponse<GatewayCreateProducerCertificateAutomationOutput> localVarResp = gatewayCreateProducerCertificateAutomationWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerCertificateAutomationOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerCertificateAutomationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerCertificateAutomationOutput> gatewayCreateProducerCertificateAutomationWithHttpInfo(GatewayCreateProducerCertificateAutomation body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerCertificateAutomationValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerCertificateAutomationOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerCertificateAutomationResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerCertificateAutomationAsync(GatewayCreateProducerCertificateAutomation body, final ApiCallback<GatewayCreateProducerCertificateAutomationOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerCertificateAutomationValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerCertificateAutomationOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerCustom
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerCustomCall(GatewayCreateProducerCustom body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerCustomValidateBeforeCall(GatewayCreateProducerCustom body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = gatewayCreateProducerCustomCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (optional)
     * @return GatewayCreateProducerCustomOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerCustomOutput gatewayCreateProducerCustom(GatewayCreateProducerCustom body) throws ApiException {
        ApiResponse<GatewayCreateProducerCustomOutput> localVarResp = gatewayCreateProducerCustomWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;GatewayCreateProducerCustomOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerCustomOutput> gatewayCreateProducerCustomWithHttpInfo(GatewayCreateProducerCustom body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerCustomValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerCustomOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayCreateProducerCustomResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerCustomAsync(GatewayCreateProducerCustom body, final ApiCallback<GatewayCreateProducerCustomOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerCustomValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerCustomOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerEks
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerEksCall(GatewayCreateProducerEks body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-eks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerEksValidateBeforeCall(GatewayCreateProducerEks body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerEks(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerEksCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerEksOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerEksOutput gatewayCreateProducerEks(GatewayCreateProducerEks body) throws ApiException {
        ApiResponse<GatewayCreateProducerEksOutput> localVarResp = gatewayCreateProducerEksWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerEksOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerEksOutput> gatewayCreateProducerEksWithHttpInfo(GatewayCreateProducerEks body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerEksValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerEksOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerEksResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerEksAsync(GatewayCreateProducerEks body, final ApiCallback<GatewayCreateProducerEksOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerEksValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerEksOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerGcp
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGcpCall(GatewayCreateProducerGcp body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-gcp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerGcpValidateBeforeCall(GatewayCreateProducerGcp body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerGcp(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerGcpCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerGcpOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerGcpOutput gatewayCreateProducerGcp(GatewayCreateProducerGcp body) throws ApiException {
        ApiResponse<GatewayCreateProducerGcpOutput> localVarResp = gatewayCreateProducerGcpWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerGcpOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerGcpOutput> gatewayCreateProducerGcpWithHttpInfo(GatewayCreateProducerGcp body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerGcpValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGcpOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGcpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGcpAsync(GatewayCreateProducerGcp body, final ApiCallback<GatewayCreateProducerGcpOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerGcpValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGcpOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerGke
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGkeCall(GatewayCreateProducerGke body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-gke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerGkeValidateBeforeCall(GatewayCreateProducerGke body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerGke(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerGkeCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerGkeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerGkeOutput gatewayCreateProducerGke(GatewayCreateProducerGke body) throws ApiException {
        ApiResponse<GatewayCreateProducerGkeOutput> localVarResp = gatewayCreateProducerGkeWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerGkeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerGkeOutput> gatewayCreateProducerGkeWithHttpInfo(GatewayCreateProducerGke body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerGkeValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGkeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerGkeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerGkeAsync(GatewayCreateProducerGke body, final ApiCallback<GatewayCreateProducerGkeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerGkeValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerGkeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerMSSQL
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMSSQLCall(GatewayCreateProducerMSSQL body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-mssql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerMSSQLValidateBeforeCall(GatewayCreateProducerMSSQL body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerMSSQL(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerMSSQLCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerMSSQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerMSSQLOutput gatewayCreateProducerMSSQL(GatewayCreateProducerMSSQL body) throws ApiException {
        ApiResponse<GatewayCreateProducerMSSQLOutput> localVarResp = gatewayCreateProducerMSSQLWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerMSSQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerMSSQLOutput> gatewayCreateProducerMSSQLWithHttpInfo(GatewayCreateProducerMSSQL body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerMSSQLValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMSSQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMSSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMSSQLAsync(GatewayCreateProducerMSSQL body, final ApiCallback<GatewayCreateProducerMSSQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerMSSQLValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMSSQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerMongo
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMongoCall(GatewayCreateProducerMongo body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-mongo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerMongoValidateBeforeCall(GatewayCreateProducerMongo body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerMongo(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerMongoCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerMongoOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerMongoOutput gatewayCreateProducerMongo(GatewayCreateProducerMongo body) throws ApiException {
        ApiResponse<GatewayCreateProducerMongoOutput> localVarResp = gatewayCreateProducerMongoWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerMongoOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerMongoOutput> gatewayCreateProducerMongoWithHttpInfo(GatewayCreateProducerMongo body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerMongoValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMongoOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMongoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMongoAsync(GatewayCreateProducerMongo body, final ApiCallback<GatewayCreateProducerMongoOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerMongoValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMongoOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerMySQL
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMySQLCall(GatewayCreateProducerMySQL body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-mysql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerMySQLValidateBeforeCall(GatewayCreateProducerMySQL body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerMySQL(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerMySQLCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerMySQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerMySQLOutput gatewayCreateProducerMySQL(GatewayCreateProducerMySQL body) throws ApiException {
        ApiResponse<GatewayCreateProducerMySQLOutput> localVarResp = gatewayCreateProducerMySQLWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerMySQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerMySQLOutput> gatewayCreateProducerMySQLWithHttpInfo(GatewayCreateProducerMySQL body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerMySQLValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMySQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerMySQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerMySQLAsync(GatewayCreateProducerMySQL body, final ApiCallback<GatewayCreateProducerMySQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerMySQLValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerMySQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerNativeK8S
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerNativeK8SCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-k8s-native";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerNativeK8SValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = gatewayCreateProducerNativeK8SCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return GatewayCreateProducerNativeK8SOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerNativeK8SOutput gatewayCreateProducerNativeK8S() throws ApiException {
        ApiResponse<GatewayCreateProducerNativeK8SOutput> localVarResp = gatewayCreateProducerNativeK8SWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;GatewayCreateProducerNativeK8SOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerNativeK8SOutput> gatewayCreateProducerNativeK8SWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerNativeK8SValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerNativeK8SOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerNativeK8SResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerNativeK8SAsync(final ApiCallback<GatewayCreateProducerNativeK8SOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerNativeK8SValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerNativeK8SOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerPostgreSQL
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerPostgreSQLCall(GatewayCreateProducerPostgreSQL body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-postgresql";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerPostgreSQLValidateBeforeCall(GatewayCreateProducerPostgreSQL body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerPostgreSQL(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerPostgreSQLCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerPostgreSQLOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerPostgreSQLOutput gatewayCreateProducerPostgreSQL(GatewayCreateProducerPostgreSQL body) throws ApiException {
        ApiResponse<GatewayCreateProducerPostgreSQLOutput> localVarResp = gatewayCreateProducerPostgreSQLWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerPostgreSQLOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerPostgreSQLOutput> gatewayCreateProducerPostgreSQLWithHttpInfo(GatewayCreateProducerPostgreSQL body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerPostgreSQLValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerPostgreSQLOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerPostgreSQLResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerPostgreSQLAsync(GatewayCreateProducerPostgreSQL body, final ApiCallback<GatewayCreateProducerPostgreSQLOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerPostgreSQLValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerPostgreSQLOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerRabbitMQ
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRabbitMQCall(GatewayCreateProducerRabbitMQ body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-rabbitmq";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerRabbitMQValidateBeforeCall(GatewayCreateProducerRabbitMQ body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerRabbitMQ(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerRabbitMQCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerRabbitMQOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerRabbitMQOutput gatewayCreateProducerRabbitMQ(GatewayCreateProducerRabbitMQ body) throws ApiException {
        ApiResponse<GatewayCreateProducerRabbitMQOutput> localVarResp = gatewayCreateProducerRabbitMQWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerRabbitMQOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerRabbitMQOutput> gatewayCreateProducerRabbitMQWithHttpInfo(GatewayCreateProducerRabbitMQ body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerRabbitMQValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRabbitMQOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRabbitMQResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRabbitMQAsync(GatewayCreateProducerRabbitMQ body, final ApiCallback<GatewayCreateProducerRabbitMQOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerRabbitMQValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRabbitMQOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerRdp
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRdpCall(GatewayCreateProducerRdp body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-rdp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerRdpValidateBeforeCall(GatewayCreateProducerRdp body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerRdp(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerRdpCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerRdpOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerRdpOutput gatewayCreateProducerRdp(GatewayCreateProducerRdp body) throws ApiException {
        ApiResponse<GatewayCreateProducerRdpOutput> localVarResp = gatewayCreateProducerRdpWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerRdpOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerRdpOutput> gatewayCreateProducerRdpWithHttpInfo(GatewayCreateProducerRdp body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerRdpValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRdpOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerRdpResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerRdpAsync(GatewayCreateProducerRdp body, final ApiCallback<GatewayCreateProducerRdpOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerRdpValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerRdpOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayCreateProducerSnowflake
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerSnowflakeCall(GatewayCreateProducerSnowflake body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-create-producer-snowflake";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayCreateProducerSnowflakeValidateBeforeCall(GatewayCreateProducerSnowflake body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayCreateProducerSnowflake(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayCreateProducerSnowflakeCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayCreateProducerSnowflakeOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayCreateProducerSnowflakeOutput gatewayCreateProducerSnowflake(GatewayCreateProducerSnowflake body) throws ApiException {
        ApiResponse<GatewayCreateProducerSnowflakeOutput> localVarResp = gatewayCreateProducerSnowflakeWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayCreateProducerSnowflakeOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayCreateProducerSnowflakeOutput> gatewayCreateProducerSnowflakeWithHttpInfo(GatewayCreateProducerSnowflake body) throws ApiException {
        okhttp3.Call localVarCall = gatewayCreateProducerSnowflakeValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerSnowflakeOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> gatewayCreateProducerSnowflakeResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayCreateProducerSnowflakeAsync(GatewayCreateProducerSnowflake body, final ApiCallback<GatewayCreateProducerSnowflakeOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayCreateProducerSnowflakeValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayCreateProducerSnowflakeOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayDeleteAllowedManagementAccess
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteSubAdminsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteAllowedManagementAccessCall(GatewayDeleteAllowedManagementAccess body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-delete-allowed-management-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayDeleteAllowedManagementAccessValidateBeforeCall(GatewayDeleteAllowedManagementAccess body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayDeleteAllowedManagementAccess(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayDeleteAllowedManagementAccessCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteSubAdminsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object gatewayDeleteAllowedManagementAccess(GatewayDeleteAllowedManagementAccess body) throws ApiException {
        ApiResponse<Object> localVarResp = gatewayDeleteAllowedManagementAccessWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteSubAdminsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> gatewayDeleteAllowedManagementAccessWithHttpInfo(GatewayDeleteAllowedManagementAccess body) throws ApiException {
        okhttp3.Call localVarCall = gatewayDeleteAllowedManagementAccessValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteSubAdminsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteAllowedManagementAccessAsync(GatewayDeleteAllowedManagementAccess body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayDeleteAllowedManagementAccessValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayDeleteProducer
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteProducerCall(GatewayDeleteProducer body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-delete-producer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayDeleteProducerValidateBeforeCall(GatewayDeleteProducer body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayDeleteProducer(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayDeleteProducerCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayDeleteProducerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayDeleteProducerOutput gatewayDeleteProducer(GatewayDeleteProducer body) throws ApiException {
        ApiResponse<GatewayDeleteProducerOutput> localVarResp = gatewayDeleteProducerWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayDeleteProducerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayDeleteProducerOutput> gatewayDeleteProducerWithHttpInfo(GatewayDeleteProducer body) throws ApiException {
        okhttp3.Call localVarCall = gatewayDeleteProducerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayDeleteProducerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayDeleteProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayDeleteProducerAsync(GatewayDeleteProducer body, final ApiCallback<GatewayDeleteProducerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayDeleteProducerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayDeleteProducerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetConfig
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetConfigCall(GatewayGetConfig body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-get-config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetConfigValidateBeforeCall(GatewayGetConfig body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayGetConfig(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayGetConfigCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return AkeylessGatewayConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AkeylessGatewayConfig gatewayGetConfig(GatewayGetConfig body) throws ApiException {
        ApiResponse<AkeylessGatewayConfig> localVarResp = gatewayGetConfigWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;AkeylessGatewayConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AkeylessGatewayConfig> gatewayGetConfigWithHttpInfo(GatewayGetConfig body) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetConfigValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<AkeylessGatewayConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetConfigResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetConfigAsync(GatewayGetConfig body, final ApiCallback<AkeylessGatewayConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetConfigValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<AkeylessGatewayConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetProducer
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetProducerCall(GatewayGetProducer body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-get-producer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetProducerValidateBeforeCall(GatewayGetProducer body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayGetProducer(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayGetProducerCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return DSProducerDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public DSProducerDetails gatewayGetProducer(GatewayGetProducer body) throws ApiException {
        ApiResponse<DSProducerDetails> localVarResp = gatewayGetProducerWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;DSProducerDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DSProducerDetails> gatewayGetProducerWithHttpInfo(GatewayGetProducer body) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetProducerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<DSProducerDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetProducerAsync(GatewayGetProducer body, final ApiCallback<DSProducerDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetProducerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<DSProducerDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayGetTmpUsers
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetTmpUsersCall(GatewayGetTmpUsers body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-get-producer-tmp-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayGetTmpUsersValidateBeforeCall(GatewayGetTmpUsers body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayGetTmpUsers(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayGetTmpUsersCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return List&lt;TmpUserData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public List<TmpUserData> gatewayGetTmpUsers(GatewayGetTmpUsers body) throws ApiException {
        ApiResponse<List<TmpUserData>> localVarResp = gatewayGetTmpUsersWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;List&lt;TmpUserData&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<TmpUserData>> gatewayGetTmpUsersWithHttpInfo(GatewayGetTmpUsers body) throws ApiException {
        okhttp3.Call localVarCall = gatewayGetTmpUsersValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<List<TmpUserData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayGetTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayGetTmpUsersAsync(GatewayGetTmpUsers body, final ApiCallback<List<TmpUserData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayGetTmpUsersValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<List<TmpUserData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayListAllowedManagementAccess
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListSubAdminsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListAllowedManagementAccessCall(GatewayListAllowedManagementAccess body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-list-allowed-management-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayListAllowedManagementAccessValidateBeforeCall(GatewayListAllowedManagementAccess body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayListAllowedManagementAccess(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayListAllowedManagementAccessCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GetSubAdminsListReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListSubAdminsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetSubAdminsListReplyObj gatewayListAllowedManagementAccess(GatewayListAllowedManagementAccess body) throws ApiException {
        ApiResponse<GetSubAdminsListReplyObj> localVarResp = gatewayListAllowedManagementAccessWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GetSubAdminsListReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListSubAdminsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSubAdminsListReplyObj> gatewayListAllowedManagementAccessWithHttpInfo(GatewayListAllowedManagementAccess body) throws ApiException {
        okhttp3.Call localVarCall = gatewayListAllowedManagementAccessValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GetSubAdminsListReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListSubAdminsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListAllowedManagementAccessAsync(GatewayListAllowedManagementAccess body, final ApiCallback<GetSubAdminsListReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayListAllowedManagementAccessValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GetSubAdminsListReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayListProducers
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListProducersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListProducersCall(GatewayListProducers body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-list-producers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayListProducersValidateBeforeCall(GatewayListProducers body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayListProducers(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayListProducersCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GetProducersListReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListProducersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetProducersListReplyObj gatewayListProducers(GatewayListProducers body) throws ApiException {
        ApiResponse<GetProducersListReplyObj> localVarResp = gatewayListProducersWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GetProducersListReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListProducersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetProducersListReplyObj> gatewayListProducersWithHttpInfo(GatewayListProducers body) throws ApiException {
        okhttp3.Call localVarCall = gatewayListProducersValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GetProducersListReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayListProducersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayListProducersAsync(GatewayListProducers body, final ApiCallback<GetProducersListReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayListProducersValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GetProducersListReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayRevokeTmpUsers
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayRevokeTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayRevokeTmpUsersCall(GatewayRevokeTmpUsers body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-revoke-producer-tmp-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayRevokeTmpUsersValidateBeforeCall(GatewayRevokeTmpUsers body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayRevokeTmpUsers(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayRevokeTmpUsersCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayRevokeTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void gatewayRevokeTmpUsers(GatewayRevokeTmpUsers body) throws ApiException {
        gatewayRevokeTmpUsersWithHttpInfo(body);
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayRevokeTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gatewayRevokeTmpUsersWithHttpInfo(GatewayRevokeTmpUsers body) throws ApiException {
        okhttp3.Call localVarCall = gatewayRevokeTmpUsersValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayRevokeTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayRevokeTmpUsersAsync(GatewayRevokeTmpUsers body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayRevokeTmpUsersValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayStartProducer
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStartProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStartProducerCall(GatewayStartProducer body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-start-producer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayStartProducerValidateBeforeCall(GatewayStartProducer body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayStartProducer(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayStartProducerCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayStartProducerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStartProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayStartProducerOutput gatewayStartProducer(GatewayStartProducer body) throws ApiException {
        ApiResponse<GatewayStartProducerOutput> localVarResp = gatewayStartProducerWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayStartProducerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStartProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayStartProducerOutput> gatewayStartProducerWithHttpInfo(GatewayStartProducer body) throws ApiException {
        okhttp3.Call localVarCall = gatewayStartProducerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayStartProducerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStartProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStartProducerAsync(GatewayStartProducer body, final ApiCallback<GatewayStartProducerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayStartProducerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayStartProducerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayStopProducer
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStopProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStopProducerCall(GatewayStopProducer body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-stop-producer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayStopProducerValidateBeforeCall(GatewayStopProducer body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayStopProducer(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayStopProducerCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GatewayStopProducerOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStopProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GatewayStopProducerOutput gatewayStopProducer(GatewayStopProducer body) throws ApiException {
        ApiResponse<GatewayStopProducerOutput> localVarResp = gatewayStopProducerWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GatewayStopProducerOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStopProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GatewayStopProducerOutput> gatewayStopProducerWithHttpInfo(GatewayStopProducer body) throws ApiException {
        okhttp3.Call localVarCall = gatewayStopProducerValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GatewayStopProducerOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayStopProducerResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayStopProducerAsync(GatewayStopProducer body, final ApiCallback<GatewayStopProducerOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayStopProducerValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GatewayStopProducerOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for gatewayUpdateTmpUsers
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateTmpUsersCall(GatewayUpdateTmpUsers body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/gateway-update-producer-tmp-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call gatewayUpdateTmpUsersValidateBeforeCall(GatewayUpdateTmpUsers body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling gatewayUpdateTmpUsers(Async)");
        }
        

        okhttp3.Call localVarCall = gatewayUpdateTmpUsersCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void gatewayUpdateTmpUsers(GatewayUpdateTmpUsers body) throws ApiException {
        gatewayUpdateTmpUsersWithHttpInfo(body);
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> gatewayUpdateTmpUsersWithHttpInfo(GatewayUpdateTmpUsers body) throws ApiException {
        okhttp3.Call localVarCall = gatewayUpdateTmpUsersValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> gatewayUpdateTmpUsersResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call gatewayUpdateTmpUsersAsync(GatewayUpdateTmpUsers body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = gatewayUpdateTmpUsersValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAccountLogo
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountLogoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountLogoCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/get-account-logo";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAccountLogoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAccountLogoCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountLogoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getAccountLogo() throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getAccountLogoWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountLogoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getAccountLogoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAccountLogoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAccountLogoResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAccountLogoAsync(final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAccountLogoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthMethod
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthMethodCall(GetAuthMethod body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-auth-method";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthMethodValidateBeforeCall(GetAuthMethod body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getAuthMethod(Async)");
        }
        

        okhttp3.Call localVarCall = getAuthMethodCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return AuthMethod
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public AuthMethod getAuthMethod(GetAuthMethod body) throws ApiException {
        ApiResponse<AuthMethod> localVarResp = getAuthMethodWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;AuthMethod&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AuthMethod> getAuthMethodWithHttpInfo(GetAuthMethod body) throws ApiException {
        okhttp3.Call localVarCall = getAuthMethodValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<AuthMethod>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getAuthMethodResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthMethodAsync(GetAuthMethod body, final ApiCallback<AuthMethod> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthMethodValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<AuthMethod>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getDynamicSecretValue
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDynamicSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDynamicSecretValueCall(GetDynamicSecretValue body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-dynamic-secret-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDynamicSecretValueValidateBeforeCall(GetDynamicSecretValue body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getDynamicSecretValue(Async)");
        }
        

        okhttp3.Call localVarCall = getDynamicSecretValueCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDynamicSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getDynamicSecretValue(GetDynamicSecretValue body) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getDynamicSecretValueWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDynamicSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getDynamicSecretValueWithHttpInfo(GetDynamicSecretValue body) throws ApiException {
        okhttp3.Call localVarCall = getDynamicSecretValueValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getDynamicSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDynamicSecretValueAsync(GetDynamicSecretValue body, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDynamicSecretValueValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getKubeExecCreds
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getKubeExecCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKubeExecCredsCall(GetKubeExecCreds body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-kube-exec-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKubeExecCredsValidateBeforeCall(GetKubeExecCreds body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getKubeExecCreds(Async)");
        }
        

        okhttp3.Call localVarCall = getKubeExecCredsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GetKubeExecCredsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getKubeExecCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetKubeExecCredsOutput getKubeExecCreds(GetKubeExecCreds body) throws ApiException {
        ApiResponse<GetKubeExecCredsOutput> localVarResp = getKubeExecCredsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GetKubeExecCredsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getKubeExecCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetKubeExecCredsOutput> getKubeExecCredsWithHttpInfo(GetKubeExecCreds body) throws ApiException {
        okhttp3.Call localVarCall = getKubeExecCredsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GetKubeExecCredsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getKubeExecCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKubeExecCredsAsync(GetKubeExecCreds body, final ApiCallback<GetKubeExecCredsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKubeExecCredsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GetKubeExecCredsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPKICertificate
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPKICertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPKICertificateCall(GetPKICertificate body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-pki-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPKICertificateValidateBeforeCall(GetPKICertificate body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getPKICertificate(Async)");
        }
        

        okhttp3.Call localVarCall = getPKICertificateCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GetPKICertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPKICertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetPKICertificateOutput getPKICertificate(GetPKICertificate body) throws ApiException {
        ApiResponse<GetPKICertificateOutput> localVarResp = getPKICertificateWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GetPKICertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPKICertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetPKICertificateOutput> getPKICertificateWithHttpInfo(GetPKICertificate body) throws ApiException {
        okhttp3.Call localVarCall = getPKICertificateValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GetPKICertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getPKICertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPKICertificateAsync(GetPKICertificate body, final ApiCallback<GetPKICertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPKICertificateValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GetPKICertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRSAPublic
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRSAPublicResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRSAPublicCall(GetRSAPublic body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-rsa-public";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRSAPublicValidateBeforeCall(GetRSAPublic body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getRSAPublic(Async)");
        }
        

        okhttp3.Call localVarCall = getRSAPublicCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GetRSAPublicOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRSAPublicResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetRSAPublicOutput getRSAPublic(GetRSAPublic body) throws ApiException {
        ApiResponse<GetRSAPublicOutput> localVarResp = getRSAPublicWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GetRSAPublicOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRSAPublicResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRSAPublicOutput> getRSAPublicWithHttpInfo(GetRSAPublic body) throws ApiException {
        okhttp3.Call localVarCall = getRSAPublicValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GetRSAPublicOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRSAPublicResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRSAPublicAsync(GetRSAPublic body, final ApiCallback<GetRSAPublicOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRSAPublicValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GetRSAPublicOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRole
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleCall(GetRole body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRoleValidateBeforeCall(GetRole body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getRole(Async)");
        }
        

        okhttp3.Call localVarCall = getRoleCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Role
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Role getRole(GetRole body) throws ApiException {
        ApiResponse<Role> localVarResp = getRoleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Role&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Role> getRoleWithHttpInfo(GetRole body) throws ApiException {
        okhttp3.Call localVarCall = getRoleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRoleAsync(GetRole body, final ApiCallback<Role> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRoleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Role>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRotatedSecretValue
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRotatedSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRotatedSecretValueCall(GetRotatedSecretValue body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-rotated-secret-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRotatedSecretValueValidateBeforeCall(GetRotatedSecretValue body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getRotatedSecretValue(Async)");
        }
        

        okhttp3.Call localVarCall = getRotatedSecretValueCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRotatedSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getRotatedSecretValue(GetRotatedSecretValue body) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getRotatedSecretValueWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRotatedSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getRotatedSecretValueWithHttpInfo(GetRotatedSecretValue body) throws ApiException {
        okhttp3.Call localVarCall = getRotatedSecretValueValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getRotatedSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRotatedSecretValueAsync(GetRotatedSecretValue body, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRotatedSecretValueValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSSHCertificate
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSHCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSSHCertificateCall(GetSSHCertificate body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-ssh-certificate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSSHCertificateValidateBeforeCall(GetSSHCertificate body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getSSHCertificate(Async)");
        }
        

        okhttp3.Call localVarCall = getSSHCertificateCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GetSSHCertificateOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSHCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetSSHCertificateOutput getSSHCertificate(GetSSHCertificate body) throws ApiException {
        ApiResponse<GetSSHCertificateOutput> localVarResp = getSSHCertificateWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GetSSHCertificateOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSHCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSSHCertificateOutput> getSSHCertificateWithHttpInfo(GetSSHCertificate body) throws ApiException {
        okhttp3.Call localVarCall = getSSHCertificateValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GetSSHCertificateOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSSHCertificateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSSHCertificateAsync(GetSSHCertificate body, final ApiCallback<GetSSHCertificateOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSSHCertificateValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GetSSHCertificateOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSecretValue
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretValueCall(GetSecretValue body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-secret-value";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSecretValueValidateBeforeCall(GetSecretValue body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getSecretValue(Async)");
        }
        

        okhttp3.Call localVarCall = getSecretValueCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Map&lt;String, String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Map<String, String> getSecretValue(GetSecretValue body) throws ApiException {
        ApiResponse<Map<String, String>> localVarResp = getSecretValueWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Map&lt;String, String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Map<String, String>> getSecretValueWithHttpInfo(GetSecretValue body) throws ApiException {
        okhttp3.Call localVarCall = getSecretValueValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getSecretValueResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSecretValueAsync(GetSecretValue body, final ApiCallback<Map<String, String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSecretValueValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Map<String, String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTargetCall(GetTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTargetValidateBeforeCall(GetTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getTarget(Async)");
        }
        

        okhttp3.Call localVarCall = getTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Target
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Target getTarget(GetTarget body) throws ApiException {
        ApiResponse<Target> localVarResp = getTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Target&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Target> getTargetWithHttpInfo(GetTarget body) throws ApiException {
        okhttp3.Call localVarCall = getTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTargetAsync(GetTarget body, final ApiCallback<Target> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Target>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTargetDetails
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTargetDetailsCall(GetTargetDetails body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/get-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTargetDetailsValidateBeforeCall(GetTargetDetails body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getTargetDetails(Async)");
        }
        

        okhttp3.Call localVarCall = getTargetDetailsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return GetTargetDetailsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public GetTargetDetailsOutput getTargetDetails(GetTargetDetails body) throws ApiException {
        ApiResponse<GetTargetDetailsOutput> localVarResp = getTargetDetailsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;GetTargetDetailsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTargetDetailsOutput> getTargetDetailsWithHttpInfo(GetTargetDetails body) throws ApiException {
        okhttp3.Call localVarCall = getTargetDetailsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<GetTargetDetailsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> getTargetDetailsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTargetDetailsAsync(GetTargetDetails body, final ApiCallback<GetTargetDetailsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTargetDetailsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<GetTargetDetailsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listAuthMethods
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthMethodsCall(ListAuthMethods body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/list-auth-methods";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listAuthMethodsValidateBeforeCall(ListAuthMethods body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listAuthMethods(Async)");
        }
        

        okhttp3.Call localVarCall = listAuthMethodsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ListAuthMethodsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListAuthMethodsOutput listAuthMethods(ListAuthMethods body) throws ApiException {
        ApiResponse<ListAuthMethodsOutput> localVarResp = listAuthMethodsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;ListAuthMethodsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListAuthMethodsOutput> listAuthMethodsWithHttpInfo(ListAuthMethods body) throws ApiException {
        okhttp3.Call localVarCall = listAuthMethodsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ListAuthMethodsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listAuthMethodsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listAuthMethodsAsync(ListAuthMethods body, final ApiCallback<ListAuthMethodsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listAuthMethodsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ListAuthMethodsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listItems
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listItemsCall(ListItems body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/list-items";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listItemsValidateBeforeCall(ListItems body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listItems(Async)");
        }
        

        okhttp3.Call localVarCall = listItemsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ListItemsInPathOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListItemsInPathOutput listItems(ListItems body) throws ApiException {
        ApiResponse<ListItemsInPathOutput> localVarResp = listItemsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;ListItemsInPathOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListItemsInPathOutput> listItemsWithHttpInfo(ListItems body) throws ApiException {
        okhttp3.Call localVarCall = listItemsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ListItemsInPathOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listItemsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listItemsAsync(ListItems body, final ApiCallback<ListItemsInPathOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listItemsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ListItemsInPathOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listRoles
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesCall(ListRoles body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/list-roles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listRolesValidateBeforeCall(ListRoles body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listRoles(Async)");
        }
        

        okhttp3.Call localVarCall = listRolesCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ListRolesOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListRolesOutput listRoles(ListRoles body) throws ApiException {
        ApiResponse<ListRolesOutput> localVarResp = listRolesWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;ListRolesOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListRolesOutput> listRolesWithHttpInfo(ListRoles body) throws ApiException {
        okhttp3.Call localVarCall = listRolesValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ListRolesOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listRolesResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listRolesAsync(ListRoles body, final ApiCallback<ListRolesOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listRolesValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ListRolesOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTargets
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTargetsCall(ListTargets body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/list-targets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTargetsValidateBeforeCall(ListTargets body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling listTargets(Async)");
        }
        

        okhttp3.Call localVarCall = listTargetsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ListTargetsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ListTargetsOutput listTargets(ListTargets body) throws ApiException {
        ApiResponse<ListTargetsOutput> localVarResp = listTargetsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;ListTargetsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTargetsOutput> listTargetsWithHttpInfo(ListTargets body) throws ApiException {
        okhttp3.Call localVarCall = listTargetsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ListTargetsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> listTargetsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTargetsAsync(ListTargets body, final ApiCallback<ListTargetsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTargetsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ListTargetsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for moveObjects
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> moveObjectsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveObjectsCall(MoveObjects body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/move-objects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call moveObjectsValidateBeforeCall(MoveObjects body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling moveObjects(Async)");
        }
        

        okhttp3.Call localVarCall = moveObjectsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> moveObjectsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object moveObjects(MoveObjects body) throws ApiException {
        ApiResponse<Object> localVarResp = moveObjectsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> moveObjectsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> moveObjectsWithHttpInfo(MoveObjects body) throws ApiException {
        okhttp3.Call localVarCall = moveObjectsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> moveObjectsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call moveObjectsAsync(MoveObjects body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = moveObjectsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rawCreds
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rawCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawCredsCall(RawCreds body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/raw-creds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rawCredsValidateBeforeCall(RawCreds body, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = rawCredsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (optional)
     * @return SystemAccessCredentialsReplyObj
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rawCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SystemAccessCredentialsReplyObj rawCreds(RawCreds body) throws ApiException {
        ApiResponse<SystemAccessCredentialsReplyObj> localVarResp = rawCredsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;SystemAccessCredentialsReplyObj&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rawCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SystemAccessCredentialsReplyObj> rawCredsWithHttpInfo(RawCreds body) throws ApiException {
        okhttp3.Call localVarCall = rawCredsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<SystemAccessCredentialsReplyObj>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rawCredsResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rawCredsAsync(RawCreds body, final ApiCallback<SystemAccessCredentialsReplyObj> _callback) throws ApiException {

        okhttp3.Call localVarCall = rawCredsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<SystemAccessCredentialsReplyObj>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for refreshKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> refreshKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshKeyCall(RefreshKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/refresh-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call refreshKeyValidateBeforeCall(RefreshKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling refreshKey(Async)");
        }
        

        okhttp3.Call localVarCall = refreshKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return RefreshKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> refreshKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RefreshKeyOutput refreshKey(RefreshKey body) throws ApiException {
        ApiResponse<RefreshKeyOutput> localVarResp = refreshKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RefreshKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> refreshKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RefreshKeyOutput> refreshKeyWithHttpInfo(RefreshKey body) throws ApiException {
        okhttp3.Call localVarCall = refreshKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RefreshKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> refreshKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call refreshKeyAsync(RefreshKey body, final ApiCallback<RefreshKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = refreshKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RefreshKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reverseRBAC
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reverseRBACResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseRBACCall(ReverseRBAC body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/reverse-rbac";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reverseRBACValidateBeforeCall(ReverseRBAC body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling reverseRBAC(Async)");
        }
        

        okhttp3.Call localVarCall = reverseRBACCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ReverseRBACOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reverseRBACResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ReverseRBACOutput reverseRBAC(ReverseRBAC body) throws ApiException {
        ApiResponse<ReverseRBACOutput> localVarResp = reverseRBACWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;ReverseRBACOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reverseRBACResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ReverseRBACOutput> reverseRBACWithHttpInfo(ReverseRBAC body) throws ApiException {
        okhttp3.Call localVarCall = reverseRBACValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<ReverseRBACOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> reverseRBACResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reverseRBACAsync(ReverseRBAC body, final ApiCallback<ReverseRBACOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = reverseRBACValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<ReverseRBACOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rollbackSecret
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rollbackSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackSecretCall(RollbackSecret body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rollback-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rollbackSecretValidateBeforeCall(RollbackSecret body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rollbackSecret(Async)");
        }
        

        okhttp3.Call localVarCall = rollbackSecretCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return RollbackSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rollbackSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RollbackSecretOutput rollbackSecret(RollbackSecret body) throws ApiException {
        ApiResponse<RollbackSecretOutput> localVarResp = rollbackSecretWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RollbackSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rollbackSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RollbackSecretOutput> rollbackSecretWithHttpInfo(RollbackSecret body) throws ApiException {
        okhttp3.Call localVarCall = rollbackSecretValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RollbackSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rollbackSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rollbackSecretAsync(RollbackSecret body, final ApiCallback<RollbackSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rollbackSecretValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RollbackSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotateKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateKeyCall(UpdateRotationSettings body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/rotate-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotateKeyValidateBeforeCall(UpdateRotationSettings body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling rotateKey(Async)");
        }
        

        okhttp3.Call localVarCall = rotateKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return RotateKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotateKeyOutput rotateKey(UpdateRotationSettings body) throws ApiException {
        ApiResponse<RotateKeyOutput> localVarResp = rotateKeyWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;RotateKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotateKeyOutput> rotateKeyWithHttpInfo(UpdateRotationSettings body) throws ApiException {
        okhttp3.Call localVarCall = rotateKeyValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RotateKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotateKeyAsync(UpdateRotationSettings body, final ApiCallback<RotateKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotateKeyValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RotateKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setItemState
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setItemStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setItemStateCall(SetItemState body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/set-item-state";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setItemStateValidateBeforeCall(SetItemState body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setItemState(Async)");
        }
        

        okhttp3.Call localVarCall = setItemStateCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setItemStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object setItemState(SetItemState body) throws ApiException {
        ApiResponse<Object> localVarResp = setItemStateWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setItemStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setItemStateWithHttpInfo(SetItemState body) throws ApiException {
        okhttp3.Call localVarCall = setItemStateValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setItemStateResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setItemStateAsync(SetItemState body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setItemStateValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setRoleRule
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleRuleCall(SetRoleRule body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/set-role-rule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setRoleRuleValidateBeforeCall(SetRoleRule body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling setRoleRule(Async)");
        }
        

        okhttp3.Call localVarCall = setRoleRuleCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object setRoleRule(SetRoleRule body) throws ApiException {
        ApiResponse<Object> localVarResp = setRoleRuleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> setRoleRuleWithHttpInfo(SetRoleRule body) throws ApiException {
        okhttp3.Call localVarCall = setRoleRuleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> setRoleRuleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setRoleRuleAsync(SetRoleRule body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = setRoleRuleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signJWTWithClassicKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signJWTWithClassicKeyCall(SignJWTWithClassicKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sign-jwt-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signJWTWithClassicKeyValidateBeforeCall(SignJWTWithClassicKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling signJWTWithClassicKey(Async)");
        }
        

        okhttp3.Call localVarCall = signJWTWithClassicKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void signJWTWithClassicKey(SignJWTWithClassicKey body) throws ApiException {
        signJWTWithClassicKeyWithHttpInfo(body);
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signJWTWithClassicKeyWithHttpInfo(SignJWTWithClassicKey body) throws ApiException {
        okhttp3.Call localVarCall = signJWTWithClassicKeyValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signJWTWithClassicKeyAsync(SignJWTWithClassicKey body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signJWTWithClassicKeyValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for signPKCS1
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signPKCS1Call(SignPKCS1 body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sign-pkcs1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signPKCS1ValidateBeforeCall(SignPKCS1 body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling signPKCS1(Async)");
        }
        

        okhttp3.Call localVarCall = signPKCS1Call(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return SignPKCS1Output
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public SignPKCS1Output signPKCS1(SignPKCS1 body) throws ApiException {
        ApiResponse<SignPKCS1Output> localVarResp = signPKCS1WithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;SignPKCS1Output&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SignPKCS1Output> signPKCS1WithHttpInfo(SignPKCS1 body) throws ApiException {
        okhttp3.Call localVarCall = signPKCS1ValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<SignPKCS1Output>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> signPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signPKCS1Async(SignPKCS1 body, final ApiCallback<SignPKCS1Output> _callback) throws ApiException {

        okhttp3.Call localVarCall = signPKCS1ValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<SignPKCS1Output>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for signPKICertWithClassicKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signPKICertWithClassicKeyCall(SignPKICertWithClassicKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/sign-pki-cert-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call signPKICertWithClassicKeyValidateBeforeCall(SignPKICertWithClassicKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling signPKICertWithClassicKey(Async)");
        }
        

        okhttp3.Call localVarCall = signPKICertWithClassicKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void signPKICertWithClassicKey(SignPKICertWithClassicKey body) throws ApiException {
        signPKICertWithClassicKeyWithHttpInfo(body);
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> signPKICertWithClassicKeyWithHttpInfo(SignPKICertWithClassicKey body) throws ApiException {
        okhttp3.Call localVarCall = signPKICertWithClassicKeyValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call signPKICertWithClassicKeyAsync(SignPKICertWithClassicKey body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = signPKICertWithClassicKeyValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for staticCredsAuth
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> staticCredsAuthResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staticCredsAuthCall(StaticCredsAuth body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/static-creds-auth";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call staticCredsAuthValidateBeforeCall(StaticCredsAuth body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling staticCredsAuth(Async)");
        }
        

        okhttp3.Call localVarCall = staticCredsAuthCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return StaticCredsAuthOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> staticCredsAuthResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public StaticCredsAuthOutput staticCredsAuth(StaticCredsAuth body) throws ApiException {
        ApiResponse<StaticCredsAuthOutput> localVarResp = staticCredsAuthWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;StaticCredsAuthOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> staticCredsAuthResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StaticCredsAuthOutput> staticCredsAuthWithHttpInfo(StaticCredsAuth body) throws ApiException {
        okhttp3.Call localVarCall = staticCredsAuthValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<StaticCredsAuthOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> staticCredsAuthResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call staticCredsAuthAsync(StaticCredsAuth body, final ApiCallback<StaticCredsAuthOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = staticCredsAuthValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<StaticCredsAuthOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidCreateChildToken
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidCreateChildTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidCreateChildTokenCall(UidCreateChildToken body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/uid-create-child-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidCreateChildTokenValidateBeforeCall(UidCreateChildToken body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uidCreateChildToken(Async)");
        }
        

        okhttp3.Call localVarCall = uidCreateChildTokenCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UidCreateChildTokenOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidCreateChildTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UidCreateChildTokenOutput uidCreateChildToken(UidCreateChildToken body) throws ApiException {
        ApiResponse<UidCreateChildTokenOutput> localVarResp = uidCreateChildTokenWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UidCreateChildTokenOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidCreateChildTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UidCreateChildTokenOutput> uidCreateChildTokenWithHttpInfo(UidCreateChildToken body) throws ApiException {
        okhttp3.Call localVarCall = uidCreateChildTokenValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UidCreateChildTokenOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidCreateChildTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidCreateChildTokenAsync(UidCreateChildToken body, final ApiCallback<UidCreateChildTokenOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidCreateChildTokenValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UidCreateChildTokenOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidGenerateToken
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidGenerateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidGenerateTokenCall(UidGenerateToken body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/uid-generate-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidGenerateTokenValidateBeforeCall(UidGenerateToken body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uidGenerateToken(Async)");
        }
        

        okhttp3.Call localVarCall = uidGenerateTokenCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UidGenerateTokenOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidGenerateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UidGenerateTokenOutput uidGenerateToken(UidGenerateToken body) throws ApiException {
        ApiResponse<UidGenerateTokenOutput> localVarResp = uidGenerateTokenWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UidGenerateTokenOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidGenerateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UidGenerateTokenOutput> uidGenerateTokenWithHttpInfo(UidGenerateToken body) throws ApiException {
        okhttp3.Call localVarCall = uidGenerateTokenValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UidGenerateTokenOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidGenerateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidGenerateTokenAsync(UidGenerateToken body, final ApiCallback<UidGenerateTokenOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidGenerateTokenValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UidGenerateTokenOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidListChildren
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidListChildrenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidListChildrenCall(UidListChildren body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/uid-list-children";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidListChildrenValidateBeforeCall(UidListChildren body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uidListChildren(Async)");
        }
        

        okhttp3.Call localVarCall = uidListChildrenCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UniversalIdentityDetails
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidListChildrenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UniversalIdentityDetails uidListChildren(UidListChildren body) throws ApiException {
        ApiResponse<UniversalIdentityDetails> localVarResp = uidListChildrenWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UniversalIdentityDetails&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidListChildrenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UniversalIdentityDetails> uidListChildrenWithHttpInfo(UidListChildren body) throws ApiException {
        okhttp3.Call localVarCall = uidListChildrenValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UniversalIdentityDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidListChildrenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidListChildrenAsync(UidListChildren body, final ApiCallback<UniversalIdentityDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidListChildrenValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UniversalIdentityDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidRevokeToken
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRevokeTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidRevokeTokenCall(UidRevokeToken body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/uid-revoke-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidRevokeTokenValidateBeforeCall(UidRevokeToken body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uidRevokeToken(Async)");
        }
        

        okhttp3.Call localVarCall = uidRevokeTokenCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRevokeTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object uidRevokeToken(UidRevokeToken body) throws ApiException {
        ApiResponse<Object> localVarResp = uidRevokeTokenWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRevokeTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> uidRevokeTokenWithHttpInfo(UidRevokeToken body) throws ApiException {
        okhttp3.Call localVarCall = uidRevokeTokenValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRevokeTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidRevokeTokenAsync(UidRevokeToken body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidRevokeTokenValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uidRotateToken
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRotateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidRotateTokenCall(UidRotateToken body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/uid-rotate-token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uidRotateTokenValidateBeforeCall(UidRotateToken body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uidRotateToken(Async)");
        }
        

        okhttp3.Call localVarCall = uidRotateTokenCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UidRotateTokenOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRotateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UidRotateTokenOutput uidRotateToken(UidRotateToken body) throws ApiException {
        ApiResponse<UidRotateTokenOutput> localVarResp = uidRotateTokenWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UidRotateTokenOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRotateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UidRotateTokenOutput> uidRotateTokenWithHttpInfo(UidRotateToken body) throws ApiException {
        okhttp3.Call localVarCall = uidRotateTokenValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UidRotateTokenOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uidRotateTokenResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uidRotateTokenAsync(UidRotateToken body, final ApiCallback<UidRotateTokenOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = uidRotateTokenValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UidRotateTokenOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAWSTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAWSTargetCall(UpdateAWSTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-aws-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAWSTargetValidateBeforeCall(UpdateAWSTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAWSTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateAWSTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAWSTarget(UpdateAWSTarget body) throws ApiException {
        ApiResponse<Object> localVarResp = updateAWSTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAWSTargetWithHttpInfo(UpdateAWSTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateAWSTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAWSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAWSTargetAsync(UpdateAWSTarget body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAWSTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAWSTargetDetails
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAWSTargetDetailsCall(UpdateAWSTargetDetails body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-aws-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAWSTargetDetailsValidateBeforeCall(UpdateAWSTargetDetails body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAWSTargetDetails(Async)");
        }
        

        okhttp3.Call localVarCall = updateAWSTargetDetailsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateAWSTargetDetails(UpdateAWSTargetDetails body) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateAWSTargetDetailsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateAWSTargetDetailsWithHttpInfo(UpdateAWSTargetDetails body) throws ApiException {
        okhttp3.Call localVarCall = updateAWSTargetDetailsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAWSTargetDetailsAsync(UpdateAWSTargetDetails body, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAWSTargetDetailsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAssoc
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssocCall(UpdateAssoc body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-assoc";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAssocValidateBeforeCall(UpdateAssoc body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAssoc(Async)");
        }
        

        okhttp3.Call localVarCall = updateAssocCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAssoc(UpdateAssoc body) throws ApiException {
        ApiResponse<Object> localVarResp = updateAssocWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAssocWithHttpInfo(UpdateAssoc body) throws ApiException {
        okhttp3.Call localVarCall = updateAssocValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAssocResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAssocAsync(UpdateAssoc body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAssocValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAzureTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAzureTargetCall(UpdateAzureTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-azure-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAzureTargetValidateBeforeCall(UpdateAzureTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateAzureTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateAzureTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateAzureTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateAzureTargetOutput updateAzureTarget(UpdateAzureTarget body) throws ApiException {
        ApiResponse<UpdateAzureTargetOutput> localVarResp = updateAzureTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateAzureTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateAzureTargetOutput> updateAzureTargetWithHttpInfo(UpdateAzureTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateAzureTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateAzureTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateAzureTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAzureTargetAsync(UpdateAzureTarget body, final ApiCallback<UpdateAzureTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAzureTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateAzureTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDBTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDBTargetCall(UpdateDBTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-db-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDBTargetValidateBeforeCall(UpdateDBTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDBTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateDBTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateDBTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateDBTargetOutput updateDBTarget(UpdateDBTarget body) throws ApiException {
        ApiResponse<UpdateDBTargetOutput> localVarResp = updateDBTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateDBTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateDBTargetOutput> updateDBTargetWithHttpInfo(UpdateDBTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateDBTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateDBTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateDBTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDBTargetAsync(UpdateDBTarget body, final ApiCallback<UpdateDBTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDBTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateDBTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateDBTargetDetails
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDBTargetDetailsCall(UpdateDBTargetDetails body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-db-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDBTargetDetailsValidateBeforeCall(UpdateDBTargetDetails body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateDBTargetDetails(Async)");
        }
        

        okhttp3.Call localVarCall = updateDBTargetDetailsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateDBTargetDetails(UpdateDBTargetDetails body) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateDBTargetDetailsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateDBTargetDetailsWithHttpInfo(UpdateDBTargetDetails body) throws ApiException {
        okhttp3.Call localVarCall = updateDBTargetDetailsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateDBTargetDetailsAsync(UpdateDBTargetDetails body, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDBTargetDetailsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateEKSTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEKSTargetCall(UpdateEKSTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-eks-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateEKSTargetValidateBeforeCall(UpdateEKSTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateEKSTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateEKSTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateEKSTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateEKSTargetOutput updateEKSTarget(UpdateEKSTarget body) throws ApiException {
        ApiResponse<UpdateEKSTargetOutput> localVarResp = updateEKSTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateEKSTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateEKSTargetOutput> updateEKSTargetWithHttpInfo(UpdateEKSTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateEKSTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateEKSTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateEKSTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateEKSTargetAsync(UpdateEKSTarget body, final ApiCallback<UpdateEKSTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateEKSTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateEKSTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGKETarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGKETargetCall(UpdateGKETarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-gke-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGKETargetValidateBeforeCall(UpdateGKETarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateGKETarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateGKETargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateGKETargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGKETargetOutput updateGKETarget(UpdateGKETarget body) throws ApiException {
        ApiResponse<UpdateGKETargetOutput> localVarResp = updateGKETargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateGKETargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGKETargetOutput> updateGKETargetWithHttpInfo(UpdateGKETarget body) throws ApiException {
        okhttp3.Call localVarCall = updateGKETargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateGKETargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGKETargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGKETargetAsync(UpdateGKETarget body, final ApiCallback<UpdateGKETargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGKETargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateGKETargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateGcpTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGcpTargetCall(UpdateGcpTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-gcp-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateGcpTargetValidateBeforeCall(UpdateGcpTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateGcpTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateGcpTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateGcpTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateGcpTargetOutput updateGcpTarget(UpdateGcpTarget body) throws ApiException {
        ApiResponse<UpdateGcpTargetOutput> localVarResp = updateGcpTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateGcpTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateGcpTargetOutput> updateGcpTargetWithHttpInfo(UpdateGcpTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateGcpTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateGcpTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateGcpTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateGcpTargetAsync(UpdateGcpTarget body, final ApiCallback<UpdateGcpTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateGcpTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateGcpTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateItem
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemCall(UpdateItem body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-item";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateItemValidateBeforeCall(UpdateItem body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateItem(Async)");
        }
        

        okhttp3.Call localVarCall = updateItemCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateItemOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateItemOutput updateItem(UpdateItem body) throws ApiException {
        ApiResponse<UpdateItemOutput> localVarResp = updateItemWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateItemOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateItemOutput> updateItemWithHttpInfo(UpdateItem body) throws ApiException {
        okhttp3.Call localVarCall = updateItemValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateItemOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateItemResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateItemAsync(UpdateItem body, final ApiCallback<UpdateItemOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateItemValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateItemOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateNativeK8STarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateNativeK8STarget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNativeK8STargetCall(UpdateNativeK8STarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-k8s-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateNativeK8STargetValidateBeforeCall(UpdateNativeK8STarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateNativeK8STarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateNativeK8STargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateNativeK8STarget
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateNativeK8STarget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateNativeK8STarget updateNativeK8STarget(UpdateNativeK8STarget body) throws ApiException {
        ApiResponse<UpdateNativeK8STarget> localVarResp = updateNativeK8STargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateNativeK8STarget&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateNativeK8STarget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateNativeK8STarget> updateNativeK8STargetWithHttpInfo(UpdateNativeK8STarget body) throws ApiException {
        okhttp3.Call localVarCall = updateNativeK8STargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateNativeK8STarget>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateNativeK8STarget </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateNativeK8STargetAsync(UpdateNativeK8STarget body, final ApiCallback<UpdateNativeK8STarget> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateNativeK8STargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateNativeK8STarget>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRDPTargetDetails
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRDPTargetDetailsCall(UpdateRDPTargetDetails body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-rdp-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRDPTargetDetailsValidateBeforeCall(UpdateRDPTargetDetails body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRDPTargetDetails(Async)");
        }
        

        okhttp3.Call localVarCall = updateRDPTargetDetailsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateRDPTargetDetails(UpdateRDPTargetDetails body) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateRDPTargetDetailsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateRDPTargetDetailsWithHttpInfo(UpdateRDPTargetDetails body) throws ApiException {
        okhttp3.Call localVarCall = updateRDPTargetDetailsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRDPTargetDetailsAsync(UpdateRDPTargetDetails body, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRDPTargetDetailsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRabbitMQTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRabbitMQTargetCall(UpdateRabbitMQTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-rabbitmq-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRabbitMQTargetValidateBeforeCall(UpdateRabbitMQTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRabbitMQTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateRabbitMQTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateRabbitMQTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRabbitMQTargetOutput updateRabbitMQTarget(UpdateRabbitMQTarget body) throws ApiException {
        ApiResponse<UpdateRabbitMQTargetOutput> localVarResp = updateRabbitMQTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateRabbitMQTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRabbitMQTargetOutput> updateRabbitMQTargetWithHttpInfo(UpdateRabbitMQTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateRabbitMQTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateRabbitMQTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRabbitMQTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRabbitMQTargetAsync(UpdateRabbitMQTarget body, final ApiCallback<UpdateRabbitMQTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRabbitMQTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateRabbitMQTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRabbitMQTargetDetails
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRabbitMQTargetDetailsCall(UpdateRabbitMQTargetDetails body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-rabbitmq-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRabbitMQTargetDetailsValidateBeforeCall(UpdateRabbitMQTargetDetails body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRabbitMQTargetDetails(Async)");
        }
        

        okhttp3.Call localVarCall = updateRabbitMQTargetDetailsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateRabbitMQTargetDetails(UpdateRabbitMQTargetDetails body) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateRabbitMQTargetDetailsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateRabbitMQTargetDetailsWithHttpInfo(UpdateRabbitMQTargetDetails body) throws ApiException {
        okhttp3.Call localVarCall = updateRabbitMQTargetDetailsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRabbitMQTargetDetailsAsync(UpdateRabbitMQTargetDetails body, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRabbitMQTargetDetailsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRole
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleCall(UpdateRole body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-role";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRoleValidateBeforeCall(UpdateRole body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRole(Async)");
        }
        

        okhttp3.Call localVarCall = updateRoleCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateRoleOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRoleOutput updateRole(UpdateRole body) throws ApiException {
        ApiResponse<UpdateRoleOutput> localVarResp = updateRoleWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateRoleOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRoleOutput> updateRoleWithHttpInfo(UpdateRole body) throws ApiException {
        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateRoleOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRoleResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRoleAsync(UpdateRole body, final ApiCallback<UpdateRoleOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRoleValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateRoleOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRotatedSecret
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRotatedSecretCall(UpdateRotatedSecret body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-rotated-secret";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRotatedSecretValidateBeforeCall(UpdateRotatedSecret body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateRotatedSecret(Async)");
        }
        

        okhttp3.Call localVarCall = updateRotatedSecretCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateRotatedSecretOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateRotatedSecretOutput updateRotatedSecret(UpdateRotatedSecret body) throws ApiException {
        ApiResponse<UpdateRotatedSecretOutput> localVarResp = updateRotatedSecretWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateRotatedSecretOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateRotatedSecretOutput> updateRotatedSecretWithHttpInfo(UpdateRotatedSecret body) throws ApiException {
        okhttp3.Call localVarCall = updateRotatedSecretValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateRotatedSecretOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateRotatedSecretResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRotatedSecretAsync(UpdateRotatedSecret body, final ApiCallback<UpdateRotatedSecretOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRotatedSecretValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateRotatedSecretOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateRotationSettings
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRotationSettingsCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/update-rotation-settingsrotate-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateRotationSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = updateRotationSettingsCall(_callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @return RotateKeyOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public RotateKeyOutput updateRotationSettings() throws ApiException {
        ApiResponse<RotateKeyOutput> localVarResp = updateRotationSettingsWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @return ApiResponse&lt;RotateKeyOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RotateKeyOutput> updateRotationSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = updateRotationSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<RotateKeyOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> rotateKeyResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateRotationSettingsAsync(final ApiCallback<RotateKeyOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateRotationSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<RotateKeyOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSSHTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHTargetCall(UpdateSSHTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-ssh-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSSHTargetValidateBeforeCall(UpdateSSHTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSSHTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateSSHTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateSSHTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSSHTargetOutput updateSSHTarget(UpdateSSHTarget body) throws ApiException {
        ApiResponse<UpdateSSHTargetOutput> localVarResp = updateSSHTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateSSHTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSSHTargetOutput> updateSSHTargetWithHttpInfo(UpdateSSHTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateSSHTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateSSHTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSSHTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHTargetAsync(UpdateSSHTarget body, final ApiCallback<UpdateSSHTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSSHTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateSSHTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSSHTargetDetails
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHTargetDetailsCall(UpdateSSHTargetDetails body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-ssh-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSSHTargetDetailsValidateBeforeCall(UpdateSSHTargetDetails body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSSHTargetDetails(Async)");
        }
        

        okhttp3.Call localVarCall = updateSSHTargetDetailsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateSSHTargetDetails(UpdateSSHTargetDetails body) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateSSHTargetDetailsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateSSHTargetDetailsWithHttpInfo(UpdateSSHTargetDetails body) throws ApiException {
        okhttp3.Call localVarCall = updateSSHTargetDetailsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSSHTargetDetailsAsync(UpdateSSHTargetDetails body, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSSHTargetDetailsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateSecretVal
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSecretValResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSecretValCall(UpdateSecretVal body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-secret-val";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSecretValValidateBeforeCall(UpdateSecretVal body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateSecretVal(Async)");
        }
        

        okhttp3.Call localVarCall = updateSecretValCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateSecretValOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSecretValResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateSecretValOutput updateSecretVal(UpdateSecretVal body) throws ApiException {
        ApiResponse<UpdateSecretValOutput> localVarResp = updateSecretValWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateSecretValOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSecretValResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateSecretValOutput> updateSecretValWithHttpInfo(UpdateSecretVal body) throws ApiException {
        okhttp3.Call localVarCall = updateSecretValValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateSecretValOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateSecretValResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateSecretValAsync(UpdateSecretVal body, final ApiCallback<UpdateSecretValOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSecretValValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateSecretValOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetCall(UpdateTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTargetValidateBeforeCall(UpdateTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateTarget(UpdateTarget body) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateTargetWithHttpInfo(UpdateTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetAsync(UpdateTarget body, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTargetDetails
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetDetailsCall(Object body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTargetDetailsValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateTargetDetails(Async)");
        }
        

        okhttp3.Call localVarCall = updateTargetDetailsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateTargetDetails(Object body) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateTargetDetailsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateTargetDetailsWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = updateTargetDetailsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTargetDetailsAsync(Object body, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTargetDetailsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebTarget
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebTargetCall(UpdateWebTarget body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-web-target";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebTargetValidateBeforeCall(UpdateWebTarget body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateWebTarget(Async)");
        }
        

        okhttp3.Call localVarCall = updateWebTargetCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateWebTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateWebTargetOutput updateWebTarget(UpdateWebTarget body) throws ApiException {
        ApiResponse<UpdateWebTargetOutput> localVarResp = updateWebTargetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateWebTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateWebTargetOutput> updateWebTargetWithHttpInfo(UpdateWebTarget body) throws ApiException {
        okhttp3.Call localVarCall = updateWebTargetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateWebTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateWebTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebTargetAsync(UpdateWebTarget body, final ApiCallback<UpdateWebTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebTargetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateWebTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateWebTargetDetails
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebTargetDetailsCall(UpdateWebTargetDetails body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/update-web-target-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebTargetDetailsValidateBeforeCall(UpdateWebTargetDetails body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling updateWebTargetDetails(Async)");
        }
        

        okhttp3.Call localVarCall = updateWebTargetDetailsCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return UpdateTargetOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTargetOutput updateWebTargetDetails(UpdateWebTargetDetails body) throws ApiException {
        ApiResponse<UpdateTargetOutput> localVarResp = updateWebTargetDetailsWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;UpdateTargetOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTargetOutput> updateWebTargetDetailsWithHttpInfo(UpdateWebTargetDetails body) throws ApiException {
        okhttp3.Call localVarCall = updateWebTargetDetailsValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> updateTargetResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateWebTargetDetailsAsync(UpdateWebTargetDetails body, final ApiCallback<UpdateTargetOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebTargetDetailsValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<UpdateTargetOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadRSA
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uploadRSAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadRSACall(UploadRSA body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/upload-rsa";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadRSAValidateBeforeCall(UploadRSA body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling uploadRSA(Async)");
        }
        

        okhttp3.Call localVarCall = uploadRSACall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uploadRSAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object uploadRSA(UploadRSA body) throws ApiException {
        ApiResponse<Object> localVarResp = uploadRSAWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uploadRSAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> uploadRSAWithHttpInfo(UploadRSA body) throws ApiException {
        okhttp3.Call localVarCall = uploadRSAValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> uploadRSAResponse wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadRSAAsync(UploadRSA body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadRSAValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyJWTWithClassicKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyJWTWithClassicKeyCall(VerifyJWTWithClassicKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/verify-jwt-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyJWTWithClassicKeyValidateBeforeCall(VerifyJWTWithClassicKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling verifyJWTWithClassicKey(Async)");
        }
        

        okhttp3.Call localVarCall = verifyJWTWithClassicKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void verifyJWTWithClassicKey(VerifyJWTWithClassicKey body) throws ApiException {
        verifyJWTWithClassicKeyWithHttpInfo(body);
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> verifyJWTWithClassicKeyWithHttpInfo(VerifyJWTWithClassicKey body) throws ApiException {
        okhttp3.Call localVarCall = verifyJWTWithClassicKeyValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyJWTWithClassicKeyAsync(VerifyJWTWithClassicKey body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyJWTWithClassicKeyValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPKCS1
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPKCS1Call(VerifyPKCS1 body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/verify-pkcs1";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPKCS1ValidateBeforeCall(VerifyPKCS1 body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling verifyPKCS1(Async)");
        }
        

        okhttp3.Call localVarCall = verifyPKCS1Call(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public Object verifyPKCS1(VerifyPKCS1 body) throws ApiException {
        ApiResponse<Object> localVarResp = verifyPKCS1WithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> verifyPKCS1WithHttpInfo(VerifyPKCS1 body) throws ApiException {
        okhttp3.Call localVarCall = verifyPKCS1ValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> verifyPKCS1Response wraps response body. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPKCS1Async(VerifyPKCS1 body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPKCS1ValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for verifyPKICertWithClassicKey
     * @param body  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPKICertWithClassicKeyCall(VerifyPKICertWithClassicKey body, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/verify-pki-cert-with-classic-key";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyPKICertWithClassicKeyValidateBeforeCall(VerifyPKICertWithClassicKey body, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling verifyPKICertWithClassicKey(Async)");
        }
        

        okhttp3.Call localVarCall = verifyPKICertWithClassicKeyCall(body, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param body  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public void verifyPKICertWithClassicKey(VerifyPKICertWithClassicKey body) throws ApiException {
        verifyPKICertWithClassicKeyWithHttpInfo(body);
    }

    /**
     * 
     * 
     * @param body  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> verifyPKICertWithClassicKeyWithHttpInfo(VerifyPKICertWithClassicKey body) throws ApiException {
        okhttp3.Call localVarCall = verifyPKICertWithClassicKeyValidateBeforeCall(body, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * 
     * @param body  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> errorResponse wraps any error to return it as a JSON object with one \&quot;error\&quot; field. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call verifyPKICertWithClassicKeyAsync(VerifyPKICertWithClassicKey body, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyPKICertWithClassicKeyValidateBeforeCall(body, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
