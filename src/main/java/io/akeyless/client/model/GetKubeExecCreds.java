/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * getKubeExecCreds is a command that gets credentials for authentication with Kubernetes cluster based on a PKI cert issuer.
 */
@ApiModel(description = "getKubeExecCreds is a command that gets credentials for authentication with Kubernetes cluster based on a PKI cert issuer.")

public class GetKubeExecCreds {
  public static final String SERIALIZED_NAME_ALT_NAMES = "alt-names";
  @SerializedName(SERIALIZED_NAME_ALT_NAMES)
  private String altNames;

  public static final String SERIALIZED_NAME_CERT_ISSUER_NAME = "cert-issuer-name";
  @SerializedName(SERIALIZED_NAME_CERT_ISSUER_NAME)
  private String certIssuerName;

  public static final String SERIALIZED_NAME_COMMON_NAME = "common-name";
  @SerializedName(SERIALIZED_NAME_COMMON_NAME)
  private String commonName;

  public static final String SERIALIZED_NAME_KEY_DATA_BASE64 = "key-data-base64";
  @SerializedName(SERIALIZED_NAME_KEY_DATA_BASE64)
  private String keyDataBase64;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public static final String SERIALIZED_NAME_URI_SANS = "uri-sans";
  @SerializedName(SERIALIZED_NAME_URI_SANS)
  private String uriSans;


  public GetKubeExecCreds altNames(String altNames) {
    
    this.altNames = altNames;
    return this;
  }

   /**
   * The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
   * @return altNames
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)")

  public String getAltNames() {
    return altNames;
  }


  public void setAltNames(String altNames) {
    this.altNames = altNames;
  }


  public GetKubeExecCreds certIssuerName(String certIssuerName) {
    
    this.certIssuerName = certIssuerName;
    return this;
  }

   /**
   * The name of the PKI certificate issuer
   * @return certIssuerName
  **/
  @ApiModelProperty(required = true, value = "The name of the PKI certificate issuer")

  public String getCertIssuerName() {
    return certIssuerName;
  }


  public void setCertIssuerName(String certIssuerName) {
    this.certIssuerName = certIssuerName;
  }


  public GetKubeExecCreds commonName(String commonName) {
    
    this.commonName = commonName;
    return this;
  }

   /**
   * The common name to be included in the PKI certificate
   * @return commonName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The common name to be included in the PKI certificate")

  public String getCommonName() {
    return commonName;
  }


  public void setCommonName(String commonName) {
    this.commonName = commonName;
  }


  public GetKubeExecCreds keyDataBase64(String keyDataBase64) {
    
    this.keyDataBase64 = keyDataBase64;
    return this;
  }

   /**
   * PKI key file contents. If this option is used, the certificate will be printed to stdout
   * @return keyDataBase64
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PKI key file contents. If this option is used, the certificate will be printed to stdout")

  public String getKeyDataBase64() {
    return keyDataBase64;
  }


  public void setKeyDataBase64(String keyDataBase64) {
    this.keyDataBase64 = keyDataBase64;
  }


  public GetKubeExecCreds token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GetKubeExecCreds uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  public GetKubeExecCreds uriSans(String uriSans) {
    
    this.uriSans = uriSans;
    return this;
  }

   /**
   * The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)
   * @return uriSans
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The URI Subject Alternative Names to be included in the PKI certificate (in a comma-delimited list)")

  public String getUriSans() {
    return uriSans;
  }


  public void setUriSans(String uriSans) {
    this.uriSans = uriSans;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetKubeExecCreds getKubeExecCreds = (GetKubeExecCreds) o;
    return Objects.equals(this.altNames, getKubeExecCreds.altNames) &&
        Objects.equals(this.certIssuerName, getKubeExecCreds.certIssuerName) &&
        Objects.equals(this.commonName, getKubeExecCreds.commonName) &&
        Objects.equals(this.keyDataBase64, getKubeExecCreds.keyDataBase64) &&
        Objects.equals(this.token, getKubeExecCreds.token) &&
        Objects.equals(this.uidToken, getKubeExecCreds.uidToken) &&
        Objects.equals(this.uriSans, getKubeExecCreds.uriSans);
  }

  @Override
  public int hashCode() {
    return Objects.hash(altNames, certIssuerName, commonName, keyDataBase64, token, uidToken, uriSans);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetKubeExecCreds {\n");
    sb.append("    altNames: ").append(toIndentedString(altNames)).append("\n");
    sb.append("    certIssuerName: ").append(toIndentedString(certIssuerName)).append("\n");
    sb.append("    commonName: ").append(toIndentedString(commonName)).append("\n");
    sb.append("    keyDataBase64: ").append(toIndentedString(keyDataBase64)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    uriSans: ").append(toIndentedString(uriSans)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

