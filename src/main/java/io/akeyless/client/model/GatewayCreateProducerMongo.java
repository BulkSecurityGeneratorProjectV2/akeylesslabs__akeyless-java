/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * gatewayCreateProducerMongo is a command that creates mongo producer
 */
@ApiModel(description = "gatewayCreateProducerMongo is a command that creates mongo producer")

public class GatewayCreateProducerMongo {
  public static final String SERIALIZED_NAME_GATEWAY_URL = "gateway-url";
  @SerializedName(SERIALIZED_NAME_GATEWAY_URL)
  private String gatewayUrl = "http://localhost:8000";

  public static final String SERIALIZED_NAME_MONGODB_NAME = "mongodb-name";
  @SerializedName(SERIALIZED_NAME_MONGODB_NAME)
  private String mongodbName;

  public static final String SERIALIZED_NAME_MONGODB_ROLES = "mongodb-roles";
  @SerializedName(SERIALIZED_NAME_MONGODB_ROLES)
  private String mongodbRoles = "[]";

  public static final String SERIALIZED_NAME_MONGODB_SERVER_URI = "mongodb-server-uri";
  @SerializedName(SERIALIZED_NAME_MONGODB_SERVER_URI)
  private String mongodbServerUri;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  private String userTtl = "60m";


  public GatewayCreateProducerMongo gatewayUrl(String gatewayUrl) {
    
    this.gatewayUrl = gatewayUrl;
    return this;
  }

   /**
   * Gateway url
   * @return gatewayUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gateway url")

  public String getGatewayUrl() {
    return gatewayUrl;
  }


  public void setGatewayUrl(String gatewayUrl) {
    this.gatewayUrl = gatewayUrl;
  }


  public GatewayCreateProducerMongo mongodbName(String mongodbName) {
    
    this.mongodbName = mongodbName;
    return this;
  }

   /**
   * MongoDB Name
   * @return mongodbName
  **/
  @ApiModelProperty(required = true, value = "MongoDB Name")

  public String getMongodbName() {
    return mongodbName;
  }


  public void setMongodbName(String mongodbName) {
    this.mongodbName = mongodbName;
  }


  public GatewayCreateProducerMongo mongodbRoles(String mongodbRoles) {
    
    this.mongodbRoles = mongodbRoles;
    return this;
  }

   /**
   * MongoDB Roles
   * @return mongodbRoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "MongoDB Roles")

  public String getMongodbRoles() {
    return mongodbRoles;
  }


  public void setMongodbRoles(String mongodbRoles) {
    this.mongodbRoles = mongodbRoles;
  }


  public GatewayCreateProducerMongo mongodbServerUri(String mongodbServerUri) {
    
    this.mongodbServerUri = mongodbServerUri;
    return this;
  }

   /**
   * Server URI
   * @return mongodbServerUri
  **/
  @ApiModelProperty(required = true, value = "Server URI")

  public String getMongodbServerUri() {
    return mongodbServerUri;
  }


  public void setMongodbServerUri(String mongodbServerUri) {
    this.mongodbServerUri = mongodbServerUri;
  }


  public GatewayCreateProducerMongo name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Producer name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Producer name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GatewayCreateProducerMongo producerEncryptionKeyName(String producerEncryptionKeyName) {
    
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

   /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dynamic producer encryption key")

  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }


  public void setProducerEncryptionKeyName(String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public GatewayCreateProducerMongo token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GatewayCreateProducerMongo uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  public GatewayCreateProducerMongo userTtl(String userTtl) {
    
    this.userTtl = userTtl;
    return this;
  }

   /**
   * User TTL
   * @return userTtl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User TTL")

  public String getUserTtl() {
    return userTtl;
  }


  public void setUserTtl(String userTtl) {
    this.userTtl = userTtl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayCreateProducerMongo gatewayCreateProducerMongo = (GatewayCreateProducerMongo) o;
    return Objects.equals(this.gatewayUrl, gatewayCreateProducerMongo.gatewayUrl) &&
        Objects.equals(this.mongodbName, gatewayCreateProducerMongo.mongodbName) &&
        Objects.equals(this.mongodbRoles, gatewayCreateProducerMongo.mongodbRoles) &&
        Objects.equals(this.mongodbServerUri, gatewayCreateProducerMongo.mongodbServerUri) &&
        Objects.equals(this.name, gatewayCreateProducerMongo.name) &&
        Objects.equals(this.producerEncryptionKeyName, gatewayCreateProducerMongo.producerEncryptionKeyName) &&
        Objects.equals(this.token, gatewayCreateProducerMongo.token) &&
        Objects.equals(this.uidToken, gatewayCreateProducerMongo.uidToken) &&
        Objects.equals(this.userTtl, gatewayCreateProducerMongo.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gatewayUrl, mongodbName, mongodbRoles, mongodbServerUri, name, producerEncryptionKeyName, token, uidToken, userTtl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayCreateProducerMongo {\n");
    sb.append("    gatewayUrl: ").append(toIndentedString(gatewayUrl)).append("\n");
    sb.append("    mongodbName: ").append(toIndentedString(mongodbName)).append("\n");
    sb.append("    mongodbRoles: ").append(toIndentedString(mongodbRoles)).append("\n");
    sb.append("    mongodbServerUri: ").append(toIndentedString(mongodbServerUri)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

