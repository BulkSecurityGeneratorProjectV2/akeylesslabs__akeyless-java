/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * gatewayCreateProducerPostgreSQL is a command that creates postgresql producer
 */
@ApiModel(description = "gatewayCreateProducerPostgreSQL is a command that creates postgresql producer")

public class GatewayCreateProducerPostgreSQL {
  public static final String SERIALIZED_NAME_CREATION_STATEMENTS = "creation-statements";
  @SerializedName(SERIALIZED_NAME_CREATION_STATEMENTS)
  private String creationStatements;

  public static final String SERIALIZED_NAME_GATEWAY_URL = "gateway-url";
  @SerializedName(SERIALIZED_NAME_GATEWAY_URL)
  private String gatewayUrl = "http://localhost:8000";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_POSTGRESQL_DB_NAME = "postgresql-db-name";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_DB_NAME)
  private String postgresqlDbName;

  public static final String SERIALIZED_NAME_POSTGRESQL_HOST = "postgresql-host";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_HOST)
  private String postgresqlHost = "127.0.0.1";

  public static final String SERIALIZED_NAME_POSTGRESQL_PASSWORD = "postgresql-password";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_PASSWORD)
  private String postgresqlPassword;

  public static final String SERIALIZED_NAME_POSTGRESQL_PORT = "postgresql-port";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_PORT)
  private String postgresqlPort = "5432";

  public static final String SERIALIZED_NAME_POSTGRESQL_USERNAME = "postgresql-username";
  @SerializedName(SERIALIZED_NAME_POSTGRESQL_USERNAME)
  private String postgresqlUsername;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY = "producer-encryption-key";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY)
  private String producerEncryptionKey;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  private String userTtl = "60m";

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;


  public GatewayCreateProducerPostgreSQL creationStatements(String creationStatements) {
    
    this.creationStatements = creationStatements;
    return this;
  }

   /**
   * PostgreSQL Creation statements
   * @return creationStatements
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PostgreSQL Creation statements")

  public String getCreationStatements() {
    return creationStatements;
  }


  public void setCreationStatements(String creationStatements) {
    this.creationStatements = creationStatements;
  }


  public GatewayCreateProducerPostgreSQL gatewayUrl(String gatewayUrl) {
    
    this.gatewayUrl = gatewayUrl;
    return this;
  }

   /**
   * Gateway url
   * @return gatewayUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gateway url")

  public String getGatewayUrl() {
    return gatewayUrl;
  }


  public void setGatewayUrl(String gatewayUrl) {
    this.gatewayUrl = gatewayUrl;
  }


  public GatewayCreateProducerPostgreSQL name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Producer name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Producer name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GatewayCreateProducerPostgreSQL password(String password) {
    
    this.password = password;
    return this;
  }

   /**
   * Required only when the authentication process requires a username and password
   * @return password
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required only when the authentication process requires a username and password")

  public String getPassword() {
    return password;
  }


  public void setPassword(String password) {
    this.password = password;
  }


  public GatewayCreateProducerPostgreSQL postgresqlDbName(String postgresqlDbName) {
    
    this.postgresqlDbName = postgresqlDbName;
    return this;
  }

   /**
   * PostgreSQL DB Name
   * @return postgresqlDbName
  **/
  @ApiModelProperty(required = true, value = "PostgreSQL DB Name")

  public String getPostgresqlDbName() {
    return postgresqlDbName;
  }


  public void setPostgresqlDbName(String postgresqlDbName) {
    this.postgresqlDbName = postgresqlDbName;
  }


  public GatewayCreateProducerPostgreSQL postgresqlHost(String postgresqlHost) {
    
    this.postgresqlHost = postgresqlHost;
    return this;
  }

   /**
   * PostgreSQL Host
   * @return postgresqlHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PostgreSQL Host")

  public String getPostgresqlHost() {
    return postgresqlHost;
  }


  public void setPostgresqlHost(String postgresqlHost) {
    this.postgresqlHost = postgresqlHost;
  }


  public GatewayCreateProducerPostgreSQL postgresqlPassword(String postgresqlPassword) {
    
    this.postgresqlPassword = postgresqlPassword;
    return this;
  }

   /**
   * PostgreSQL Password
   * @return postgresqlPassword
  **/
  @ApiModelProperty(required = true, value = "PostgreSQL Password")

  public String getPostgresqlPassword() {
    return postgresqlPassword;
  }


  public void setPostgresqlPassword(String postgresqlPassword) {
    this.postgresqlPassword = postgresqlPassword;
  }


  public GatewayCreateProducerPostgreSQL postgresqlPort(String postgresqlPort) {
    
    this.postgresqlPort = postgresqlPort;
    return this;
  }

   /**
   * PostgreSQL Port
   * @return postgresqlPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "PostgreSQL Port")

  public String getPostgresqlPort() {
    return postgresqlPort;
  }


  public void setPostgresqlPort(String postgresqlPort) {
    this.postgresqlPort = postgresqlPort;
  }


  public GatewayCreateProducerPostgreSQL postgresqlUsername(String postgresqlUsername) {
    
    this.postgresqlUsername = postgresqlUsername;
    return this;
  }

   /**
   * PostgreSQL Username
   * @return postgresqlUsername
  **/
  @ApiModelProperty(required = true, value = "PostgreSQL Username")

  public String getPostgresqlUsername() {
    return postgresqlUsername;
  }


  public void setPostgresqlUsername(String postgresqlUsername) {
    this.postgresqlUsername = postgresqlUsername;
  }


  public GatewayCreateProducerPostgreSQL producerEncryptionKey(String producerEncryptionKey) {
    
    this.producerEncryptionKey = producerEncryptionKey;
    return this;
  }

   /**
   * Dynamic producer encryption key
   * @return producerEncryptionKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dynamic producer encryption key")

  public String getProducerEncryptionKey() {
    return producerEncryptionKey;
  }


  public void setProducerEncryptionKey(String producerEncryptionKey) {
    this.producerEncryptionKey = producerEncryptionKey;
  }


  public GatewayCreateProducerPostgreSQL token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GatewayCreateProducerPostgreSQL uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  public GatewayCreateProducerPostgreSQL userTtl(String userTtl) {
    
    this.userTtl = userTtl;
    return this;
  }

   /**
   * User TTL
   * @return userTtl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User TTL")

  public String getUserTtl() {
    return userTtl;
  }


  public void setUserTtl(String userTtl) {
    this.userTtl = userTtl;
  }


  public GatewayCreateProducerPostgreSQL username(String username) {
    
    this.username = username;
    return this;
  }

   /**
   * Required only when the authentication process requires a username and password
   * @return username
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Required only when the authentication process requires a username and password")

  public String getUsername() {
    return username;
  }


  public void setUsername(String username) {
    this.username = username;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayCreateProducerPostgreSQL gatewayCreateProducerPostgreSQL = (GatewayCreateProducerPostgreSQL) o;
    return Objects.equals(this.creationStatements, gatewayCreateProducerPostgreSQL.creationStatements) &&
        Objects.equals(this.gatewayUrl, gatewayCreateProducerPostgreSQL.gatewayUrl) &&
        Objects.equals(this.name, gatewayCreateProducerPostgreSQL.name) &&
        Objects.equals(this.password, gatewayCreateProducerPostgreSQL.password) &&
        Objects.equals(this.postgresqlDbName, gatewayCreateProducerPostgreSQL.postgresqlDbName) &&
        Objects.equals(this.postgresqlHost, gatewayCreateProducerPostgreSQL.postgresqlHost) &&
        Objects.equals(this.postgresqlPassword, gatewayCreateProducerPostgreSQL.postgresqlPassword) &&
        Objects.equals(this.postgresqlPort, gatewayCreateProducerPostgreSQL.postgresqlPort) &&
        Objects.equals(this.postgresqlUsername, gatewayCreateProducerPostgreSQL.postgresqlUsername) &&
        Objects.equals(this.producerEncryptionKey, gatewayCreateProducerPostgreSQL.producerEncryptionKey) &&
        Objects.equals(this.token, gatewayCreateProducerPostgreSQL.token) &&
        Objects.equals(this.uidToken, gatewayCreateProducerPostgreSQL.uidToken) &&
        Objects.equals(this.userTtl, gatewayCreateProducerPostgreSQL.userTtl) &&
        Objects.equals(this.username, gatewayCreateProducerPostgreSQL.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationStatements, gatewayUrl, name, password, postgresqlDbName, postgresqlHost, postgresqlPassword, postgresqlPort, postgresqlUsername, producerEncryptionKey, token, uidToken, userTtl, username);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayCreateProducerPostgreSQL {\n");
    sb.append("    creationStatements: ").append(toIndentedString(creationStatements)).append("\n");
    sb.append("    gatewayUrl: ").append(toIndentedString(gatewayUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    postgresqlDbName: ").append(toIndentedString(postgresqlDbName)).append("\n");
    sb.append("    postgresqlHost: ").append(toIndentedString(postgresqlHost)).append("\n");
    sb.append("    postgresqlPassword: ").append(toIndentedString(postgresqlPassword)).append("\n");
    sb.append("    postgresqlPort: ").append(toIndentedString(postgresqlPort)).append("\n");
    sb.append("    postgresqlUsername: ").append(toIndentedString(postgresqlUsername)).append("\n");
    sb.append("    producerEncryptionKey: ").append(toIndentedString(producerEncryptionKey)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

