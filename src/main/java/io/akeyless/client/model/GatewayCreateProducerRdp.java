/*
 * Akeyless API
 * The purpose of this application is to provide access to Akeyless API.
 *
 * The version of the OpenAPI document: 2.0
 * Contact: support@akeyless.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.akeyless.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * gatewayCreateProducerRdp is a command that creates rdp producer
 */
@ApiModel(description = "gatewayCreateProducerRdp is a command that creates rdp producer")

public class GatewayCreateProducerRdp {
  public static final String SERIALIZED_NAME_FIXED_USER_ONLY = "fixed-user-only";
  @SerializedName(SERIALIZED_NAME_FIXED_USER_ONLY)
  private String fixedUserOnly = "false";

  public static final String SERIALIZED_NAME_GATEWAY_URL = "gateway-url";
  @SerializedName(SERIALIZED_NAME_GATEWAY_URL)
  private String gatewayUrl = "http://localhost:8000";

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME = "producer-encryption-key-name";
  @SerializedName(SERIALIZED_NAME_PRODUCER_ENCRYPTION_KEY_NAME)
  private String producerEncryptionKeyName;

  public static final String SERIALIZED_NAME_RDP_ADMIN_NAME = "rdp-admin-name";
  @SerializedName(SERIALIZED_NAME_RDP_ADMIN_NAME)
  private String rdpAdminName;

  public static final String SERIALIZED_NAME_RDP_ADMIN_PWD = "rdp-admin-pwd";
  @SerializedName(SERIALIZED_NAME_RDP_ADMIN_PWD)
  private String rdpAdminPwd;

  public static final String SERIALIZED_NAME_RDP_HOST_NAME = "rdp-host-name";
  @SerializedName(SERIALIZED_NAME_RDP_HOST_NAME)
  private String rdpHostName;

  public static final String SERIALIZED_NAME_RDP_HOST_PORT = "rdp-host-port";
  @SerializedName(SERIALIZED_NAME_RDP_HOST_PORT)
  private String rdpHostPort = "22";

  public static final String SERIALIZED_NAME_RDP_USER_GROUPS = "rdp-user-groups";
  @SerializedName(SERIALIZED_NAME_RDP_USER_GROUPS)
  private String rdpUserGroups;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_UID_TOKEN = "uid-token";
  @SerializedName(SERIALIZED_NAME_UID_TOKEN)
  private String uidToken;

  public static final String SERIALIZED_NAME_USER_TTL = "user-ttl";
  @SerializedName(SERIALIZED_NAME_USER_TTL)
  private String userTtl = "60m";


  public GatewayCreateProducerRdp fixedUserOnly(String fixedUserOnly) {
    
    this.fixedUserOnly = fixedUserOnly;
    return this;
  }

   /**
   * Fixed user
   * @return fixedUserOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Fixed user")

  public String getFixedUserOnly() {
    return fixedUserOnly;
  }


  public void setFixedUserOnly(String fixedUserOnly) {
    this.fixedUserOnly = fixedUserOnly;
  }


  public GatewayCreateProducerRdp gatewayUrl(String gatewayUrl) {
    
    this.gatewayUrl = gatewayUrl;
    return this;
  }

   /**
   * Gateway url
   * @return gatewayUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Gateway url")

  public String getGatewayUrl() {
    return gatewayUrl;
  }


  public void setGatewayUrl(String gatewayUrl) {
    this.gatewayUrl = gatewayUrl;
  }


  public GatewayCreateProducerRdp name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Producer name
   * @return name
  **/
  @ApiModelProperty(required = true, value = "Producer name")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public GatewayCreateProducerRdp producerEncryptionKeyName(String producerEncryptionKeyName) {
    
    this.producerEncryptionKeyName = producerEncryptionKeyName;
    return this;
  }

   /**
   * Dynamic producer encryption key
   * @return producerEncryptionKeyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Dynamic producer encryption key")

  public String getProducerEncryptionKeyName() {
    return producerEncryptionKeyName;
  }


  public void setProducerEncryptionKeyName(String producerEncryptionKeyName) {
    this.producerEncryptionKeyName = producerEncryptionKeyName;
  }


  public GatewayCreateProducerRdp rdpAdminName(String rdpAdminName) {
    
    this.rdpAdminName = rdpAdminName;
    return this;
  }

   /**
   * RDP Admin Name
   * @return rdpAdminName
  **/
  @ApiModelProperty(required = true, value = "RDP Admin Name")

  public String getRdpAdminName() {
    return rdpAdminName;
  }


  public void setRdpAdminName(String rdpAdminName) {
    this.rdpAdminName = rdpAdminName;
  }


  public GatewayCreateProducerRdp rdpAdminPwd(String rdpAdminPwd) {
    
    this.rdpAdminPwd = rdpAdminPwd;
    return this;
  }

   /**
   * RDP Admin password
   * @return rdpAdminPwd
  **/
  @ApiModelProperty(required = true, value = "RDP Admin password")

  public String getRdpAdminPwd() {
    return rdpAdminPwd;
  }


  public void setRdpAdminPwd(String rdpAdminPwd) {
    this.rdpAdminPwd = rdpAdminPwd;
  }


  public GatewayCreateProducerRdp rdpHostName(String rdpHostName) {
    
    this.rdpHostName = rdpHostName;
    return this;
  }

   /**
   * Hostname
   * @return rdpHostName
  **/
  @ApiModelProperty(required = true, value = "Hostname")

  public String getRdpHostName() {
    return rdpHostName;
  }


  public void setRdpHostName(String rdpHostName) {
    this.rdpHostName = rdpHostName;
  }


  public GatewayCreateProducerRdp rdpHostPort(String rdpHostPort) {
    
    this.rdpHostPort = rdpHostPort;
    return this;
  }

   /**
   * Port
   * @return rdpHostPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Port")

  public String getRdpHostPort() {
    return rdpHostPort;
  }


  public void setRdpHostPort(String rdpHostPort) {
    this.rdpHostPort = rdpHostPort;
  }


  public GatewayCreateProducerRdp rdpUserGroups(String rdpUserGroups) {
    
    this.rdpUserGroups = rdpUserGroups;
    return this;
  }

   /**
   * Groups
   * @return rdpUserGroups
  **/
  @ApiModelProperty(required = true, value = "Groups")

  public String getRdpUserGroups() {
    return rdpUserGroups;
  }


  public void setRdpUserGroups(String rdpUserGroups) {
    this.rdpUserGroups = rdpUserGroups;
  }


  public GatewayCreateProducerRdp token(String token) {
    
    this.token = token;
    return this;
  }

   /**
   * Authentication token (see &#x60;/auth&#x60; and &#x60;/configure&#x60;)
   * @return token
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Authentication token (see `/auth` and `/configure`)")

  public String getToken() {
    return token;
  }


  public void setToken(String token) {
    this.token = token;
  }


  public GatewayCreateProducerRdp uidToken(String uidToken) {
    
    this.uidToken = uidToken;
    return this;
  }

   /**
   * The universal identity token, Required only for universal_identity authentication
   * @return uidToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The universal identity token, Required only for universal_identity authentication")

  public String getUidToken() {
    return uidToken;
  }


  public void setUidToken(String uidToken) {
    this.uidToken = uidToken;
  }


  public GatewayCreateProducerRdp userTtl(String userTtl) {
    
    this.userTtl = userTtl;
    return this;
  }

   /**
   * User TTL
   * @return userTtl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "User TTL")

  public String getUserTtl() {
    return userTtl;
  }


  public void setUserTtl(String userTtl) {
    this.userTtl = userTtl;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GatewayCreateProducerRdp gatewayCreateProducerRdp = (GatewayCreateProducerRdp) o;
    return Objects.equals(this.fixedUserOnly, gatewayCreateProducerRdp.fixedUserOnly) &&
        Objects.equals(this.gatewayUrl, gatewayCreateProducerRdp.gatewayUrl) &&
        Objects.equals(this.name, gatewayCreateProducerRdp.name) &&
        Objects.equals(this.producerEncryptionKeyName, gatewayCreateProducerRdp.producerEncryptionKeyName) &&
        Objects.equals(this.rdpAdminName, gatewayCreateProducerRdp.rdpAdminName) &&
        Objects.equals(this.rdpAdminPwd, gatewayCreateProducerRdp.rdpAdminPwd) &&
        Objects.equals(this.rdpHostName, gatewayCreateProducerRdp.rdpHostName) &&
        Objects.equals(this.rdpHostPort, gatewayCreateProducerRdp.rdpHostPort) &&
        Objects.equals(this.rdpUserGroups, gatewayCreateProducerRdp.rdpUserGroups) &&
        Objects.equals(this.token, gatewayCreateProducerRdp.token) &&
        Objects.equals(this.uidToken, gatewayCreateProducerRdp.uidToken) &&
        Objects.equals(this.userTtl, gatewayCreateProducerRdp.userTtl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(fixedUserOnly, gatewayUrl, name, producerEncryptionKeyName, rdpAdminName, rdpAdminPwd, rdpHostName, rdpHostPort, rdpUserGroups, token, uidToken, userTtl);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GatewayCreateProducerRdp {\n");
    sb.append("    fixedUserOnly: ").append(toIndentedString(fixedUserOnly)).append("\n");
    sb.append("    gatewayUrl: ").append(toIndentedString(gatewayUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    producerEncryptionKeyName: ").append(toIndentedString(producerEncryptionKeyName)).append("\n");
    sb.append("    rdpAdminName: ").append(toIndentedString(rdpAdminName)).append("\n");
    sb.append("    rdpAdminPwd: ").append(toIndentedString(rdpAdminPwd)).append("\n");
    sb.append("    rdpHostName: ").append(toIndentedString(rdpHostName)).append("\n");
    sb.append("    rdpHostPort: ").append(toIndentedString(rdpHostPort)).append("\n");
    sb.append("    rdpUserGroups: ").append(toIndentedString(rdpUserGroups)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    uidToken: ").append(toIndentedString(uidToken)).append("\n");
    sb.append("    userTtl: ").append(toIndentedString(userTtl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

